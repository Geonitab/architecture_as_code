# Multi-stage Docker image for complete release building
FROM node:25-bookworm AS release-builder

ENV DEBIAN_FRONTEND=noninteractive

# ---- Base utilities ----
RUN apt-get update && apt-get install -y --no-install-recommends \
    wget \
    gnupg \
    ca-certificates \
 && rm -rf /var/lib/apt/lists/*

# ---- Google Chrome (Bookworm-safe, with retry & Chromium fallback) ----
RUN set -eux; \
  install -m 0755 -d /usr/share/keyrings; \
  wget -qO- https://dl.google.com/linux/linux_signing_key.pub \
    | gpg --dearmor > /usr/share/keyrings/google-chrome.gpg; \
  echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome.gpg] https://dl.google.com/linux/chrome/deb/ stable main" \
    > /etc/apt/sources.list.d/google-chrome.list; \
  for i in 1 2 3; do \
    if apt-get update; then break; else echo "apt-get update failed, retry $i/3"; sleep 5; fi; \
  done; \
  if apt-get install -y --no-install-recommends google-chrome-stable; then \
    echo "✅ Installed Google Chrome"; \
  else \
    echo "⚠️ Chrome install failed; falling back to Chromium"; \
    apt-get install -y --no-install-recommends chromium; \
    ln -sf /usr/bin/chromium /usr/local/bin/google-chrome-stable; \
  fi; \
  rm -rf /var/lib/apt/lists/*

# ---- System deps incl. TeX Live ----
RUN apt-get update && apt-get install -y --no-install-recommends \
    texlive-xetex \
    texlive-fonts-recommended \
    texlive-plain-generic \
    texlive-latex-extra \
    texlive-luatex \
    texlive-fonts-extra \
    texlive-lang-european \
    librsvg2-bin \
    fonts-liberation \
    fonts-dejavu \
    # Python (3.11 on Bookworm) + pip + 'python' shim
    python3 \
    python3-pip \
    python-is-python3 \
    # Java for EPUBCheck
    openjdk-17-jdk \
    zip \
    unzip \
 && rm -rf /var/lib/apt/lists/*

# ---- EPUBCheck ----
RUN cd /tmp \
 && wget -q https://github.com/w3c/epubcheck/releases/download/v5.1.0/epubcheck-5.1.0.zip \
 && unzip -q epubcheck-5.1.0.zip \
 && mv epubcheck-5.1.0 /opt/ \
 && ln -sf /opt/epubcheck-5.1.0/epubcheck.jar /usr/local/bin/ \
 && printf '%s\n' '#!/bin/sh' 'exec java -jar /opt/epubcheck-5.1.0/epubcheck.jar "$@"' > /usr/local/bin/epubcheck \
 && chmod +x /usr/local/bin/epubcheck \
 && rm -f /tmp/epubcheck-5.1.0.zip

# ---- Pandoc ----
ARG PANDOC_VERSION=3.1.9
RUN wget -q https://github.com/jgm/pandoc/releases/download/${PANDOC_VERSION}/pandoc-${PANDOC_VERSION}-1-amd64.deb \
 && dpkg -i pandoc-${PANDOC_VERSION}-1-amd64.deb || (apt-get -f install -y && dpkg -i pandoc-${PANDOC_VERSION}-1-amd64.deb) \
 && rm pandoc-${PANDOC_VERSION}-1-amd64.deb

# ---- Node toolchain for Mermaid ----
RUN npm install -g @mermaid-js/mermaid-cli

# ---- Python deps ----
RUN python -m pip install --upgrade pip wheel \
 && pip install "python-pptx>=0.6.21" "PyYAML>=6.0"

# Puppeteer/Chrome env
ENV PUPPETEER_EXECUTABLE_PATH=/usr/bin/google-chrome-stable
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
ENV CHROME_FLAGS="--no-sandbox --disable-setuid-sandbox --disable-dev-shm-usage --disable-accelerated-2d-canvas --no-first-run --no-zygote --disable-gpu"

# ---- Pandoc template setup ----
RUN mkdir -p /root/.local/share/pandoc/templates \
 && (pandoc --print-default-template=latex > /root/.local/share/pandoc/templates/eisvogel.latex || true)

# Try to fetch Eisvogel; fall back to default on failure
RUN wget -qO- https://github.com/Wandmalfarbe/pandoc-latex-template/releases/latest/download/Eisvogel.tar.gz \
 | tar -xz -C /tmp/ 2>/dev/null \
 && find /tmp -name "eisvogel.latex" -exec cp {} /root/.local/share/pandoc/templates/ \; 2>/dev/null \
 || echo "Using default template"

# ---- Sanity prints (handy in build logs) ----
RUN set -e; \
    echo "Python:" && python --version; \
    echo "Pip:   " && pip --version; \
    echo "Node:  " && node --version; \
    echo "Java:  " && java -version; \
    echo "Pandoc:" && pandoc --version | head -n 2; \
    echo "Chrome:" && command -v google-chrome-stable >/dev/null && google-chrome-stable --version || chromium --version

# ---- Workspace & scripts ----
WORKDIR /workspace

# Copy build scripts
COPY build_release.sh /usr/local/bin/build_release.sh
COPY docs/build_book.sh /usr/local/bin/build_book.sh
COPY generate_book.py /usr/local/bin/generate_book.py
COPY generate_whitepapers.py /usr/local/bin/generate_whitepapers.py
COPY generate_presentation.py /usr/local/bin/generate_presentation.py

RUN chmod +x /usr/local/bin/build_release.sh \
 && chmod +x /usr/local/bin/build_book.sh

# Default to running the complete release build
ENTRYPOINT ["/usr/local/bin/build_release.sh"]