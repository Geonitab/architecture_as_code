name: Build English Book

"on":
  push:
    branches: [main]
    paths:
      - 'english/docs/**/*.md'
      - 'english/docs/images/**/*.mmd'
      - 'english/.github/workflows/build-book-en.yml'
      - 'generate_book_en.py'
  pull_request:
    branches: [main]
    paths:
      - 'english/docs/**/*.md'
      - 'english/docs/images/**/*.mmd'
      - 'english/.github/workflows/build-book-en.yml'
      - 'generate_book_en.py'
  workflow_dispatch: {}

env:
  PANDOC_VERSION: "3.1.9"
  ARTIFACT_RETENTION_DAYS: 30

jobs:
  build-english-book:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: üì¶ Cache package installations
        uses: actions/cache@v3
        with:
          path: |
            /var/cache/apt
            ~/.cache/pip
            ~/.local/share/pandoc
          key: ${{ runner.os }}-book-deps-en-${{ env.PANDOC_VERSION }}-v2
          restore-keys: |
            ${{ runner.os }}-book-deps-en-

      - name: üîß Install system dependencies
        run: |
          echo "=== Installing system dependencies ==="
          sudo apt-get update
          echo "Installing TeXLive and related packages..."
          sudo apt-get install -y \
            texlive-xetex \
            texlive-fonts-recommended \
            texlive-plain-generic \
            texlive-latex-extra \
            texlive-luatex \
            librsvg2-bin \
            fonts-liberation \
            fonts-dejavu
          echo "‚úÖ System dependencies installed"

      - name: üìö Install Pandoc
        run: |
          echo "=== Installing Pandoc $PANDOC_VERSION ==="
          wget -q https://github.com/jgm/pandoc/releases/download/$PANDOC_VERSION/pandoc-$PANDOC_VERSION-1-amd64.deb
          sudo dpkg -i pandoc-$PANDOC_VERSION-1-amd64.deb
          pandoc --version
          echo "‚úÖ Pandoc installed"

      - name: üé® Install Mermaid CLI
        run: |
          echo "=== Installing Mermaid CLI ==="
          npm install -g @mermaid-js/mermaid-cli
          
          # Install Chrome for Puppeteer
          sudo apt-get install -y google-chrome-stable
          
          # Verify installation
          mmdc --version
          echo "‚úÖ Mermaid CLI installed"

      - name: üìã Setup Pandoc template
        run: |
          echo "=== Setting up Pandoc template ==="
          mkdir -p ~/.local/share/pandoc/templates
          pandoc --print-default-template=latex > ~/.local/share/pandoc/templates/eisvogel.latex
          echo "‚úÖ Eisvogel template installed"

      - name: üìù Generate English book content
        run: |
          echo "=== Generating English book content ==="
          python3 generate_book_en.py
          echo "‚úÖ English book content generated"

      - name: üñºÔ∏è Convert Mermaid diagrams to PNG
        run: |
          echo "=== Converting Mermaid diagrams ==="
          cd english/docs
          diagram_count=0
          
          # Check if any .mmd files exist
          if ls images/*.mmd 1> /dev/null 2>&1; then
            for mmd_file in images/*.mmd; do
              if [ -f "$mmd_file" ]; then
                png_file="${mmd_file%.mmd}.png"
                echo "Converting $mmd_file ‚Üí $png_file"
                
                # Set Chrome executable for Puppeteer
                export PUPPETEER_EXECUTABLE_PATH=$(which google-chrome)
                
                mmdc \
                  -i "$mmd_file" \
                  -o "$png_file" \
                  -t dark \
                  -b transparent \
                  --width 1200 \
                  --height 800 \
                  || echo "‚ö†Ô∏è Warning: Failed to convert $mmd_file"
                
                diagram_count=$((diagram_count + 1))
              fi
            done
            echo "‚úÖ Processed $diagram_count Mermaid diagrams"
          else
            echo "‚ÑπÔ∏è No Mermaid diagrams found to convert"
          fi

      - name: üìñ Build English PDF book
        run: |
          echo "=== Building English PDF book ==="
          cd english/docs
          
          # List available markdown files for debugging
          echo "Available English markdown files:"
          ls -la *.md | head -10
          
          # Check if all required files exist
          required_files="01_introduction.md 02_chapter1.md"
          missing_files=""
          for file in $required_files; do
            if [ ! -f "$file" ]; then
              missing_files="$missing_files $file"
            fi
          done
          
          if [ -n "$missing_files" ]; then
            echo "‚ö†Ô∏è Warning: Missing files:$missing_files"
            echo "Available files:"
            ls *.md
            echo "Will attempt to build with available files..."
            
            # Build with all available markdown files
            available_files=$(ls *.md | sort)
            pandoc \
              --standalone \
              --template="$HOME/.local/share/pandoc/templates/eisvogel.latex" \
              --toc \
              --toc-depth=3 \
              --number-sections \
              --pdf-engine=xelatex \
              -s \
              -o architecture_as_code.pdf \
              $available_files
          else
            echo "‚úÖ All required files found"
            # Build PDF with Pandoc using specified files
            pandoc \
              --standalone \
              --template="$HOME/.local/share/pandoc/templates/eisvogel.latex" \
              --toc \
              --toc-depth=3 \
              --number-sections \
              --pdf-engine=xelatex \
              -s \
              -o architecture_as_code.pdf \
              01_introduction.md \
              02_chapter1.md
          fi
          
          # Verify PDF was created
          if [ -f "architecture_as_code.pdf" ]; then
            file_size=$(ls -lh architecture_as_code.pdf | awk '{print $5}')
            echo "‚úÖ English PDF generated successfully (Size: $file_size)"
            echo "PDF details:"
            file architecture_as_code.pdf
          else
            echo "‚ùå Failed to generate English PDF"
            exit 1
          fi

      - name: üìä English book build summary
        run: |
          echo "=== English Build Summary ==="
          echo "Markdown files: $(ls english/docs/*.md | wc -l)"
          echo "Mermaid diagrams: $(ls english/docs/images/*.mmd | wc -l)"
          echo "Generated PNGs: $(ls english/docs/images/*.png | wc -l)"
          echo "PDF size: $(ls -lh english/docs/architecture_as_code.pdf | awk '{print $5}')"
          echo "Build completed at: $(date)"

      - name: üì§ Upload English PDF artifact
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: architecture-as-code-pdf-english
          path: english/docs/architecture_as_code.pdf
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

      - name: üì§ Upload English book images
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: book-diagrams-english
          path: english/docs/images/*.png
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          if-no-files-found: warn

      - name: üöÄ Create English Release (on main branch)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}-en
          name: "Architecture as Code v${{ github.run_number }} (English Edition)"
          body: |
            üìö **Architecture as Code - Automatic English Release**
            
            Generated from commit: ${{ github.sha }}
            
            **Contents:**
            - üìñ Complete PDF book (English)
            - üñºÔ∏è Mermaid diagrams as PNG files
            
            **Build info:**
            - Built with Pandoc ${{ env.PANDOC_VERSION }}
            - XeLaTeX PDF engine
            - Eisvogel LaTeX template
            
            Download the PDF from Assets below ‚¨áÔ∏è
          files: |
            english/docs/architecture_as_code.pdf
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}