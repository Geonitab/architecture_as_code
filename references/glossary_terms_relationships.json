{
  "version": 1,
  "terms": [
    {
      "id": "api",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "underpins",
          "reason": "API underpins Architecture as Code by keeping the core vocabulary reproducible."
        },
        {
          "term": "architecture_decision_record",
          "relationship": "aligns_with",
          "reason": "API aligns with Architecture Decision Record so teams reuse verified patterns without drift."
        }
      ],
      "name": "API",
      "category": "foundation",
      "summary": "A contract that allows systems to interact predictably, enabling modular architectures and integrated delivery workflows."
    },
    {
      "id": "architecture_as_code",
      "name": "Architecture as Code",
      "category": "foundation",
      "summary": "Treating architectural decisions, guardrails, and platform capabilities as versioned artefacts that are reviewed, tested, and deployed through automated pipelines.",
      "related": [
        {
          "term": "knowledge_graph",
          "relationship": "documents",
          "reason": "Knowledge graph inventories codified architecture components and their associations."
        },
        {
          "term": "policy_as_code",
          "relationship": "enforces",
          "reason": "Policies are executed against Architecture as Code models to guarantee guardrails."
        },
        {
          "term": "architecture_decision_record",
          "relationship": "explained_by",
          "reason": "ADRs provide context for Architecture as Code changes and integrations."
        }
      ]
    },
    {
      "id": "architecture_decision_record",
      "name": "Architecture Decision Record",
      "category": "foundation",
      "summary": "A lightweight document that captures context, decision, and consequences so teams understand why architectural choices were made and can revisit them together.",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "context_for",
          "reason": "ADRs explain why Architecture as Code artefacts exist and how they should evolve."
        },
        {
          "term": "knowledge_graph",
          "relationship": "indexed_in",
          "reason": "Knowledge graph entries reference ADRs to make decisions discoverable."
        },
        {
          "term": "continuous_compliance",
          "relationship": "evidenced_by",
          "reason": "Compliance narratives cite ADRs to demonstrate design intent and approvals."
        }
      ]
    },
    {
      "id": "declarative_programming",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "underpins",
          "reason": "Declarative Programming underpins Architecture as Code by keeping the core vocabulary reproducible."
        },
        {
          "term": "architecture_decision_record",
          "relationship": "aligns_with",
          "reason": "Declarative Programming aligns with Architecture Decision Record so teams reuse verified patterns without drift."
        }
      ],
      "name": "Declarative Programming",
      "category": "foundation",
      "summary": "A style of describing desired outcomes rather than procedural steps, enabling automation tools to converge systems on the target state reliably."
    },
    {
      "id": "idempotence",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "underpins",
          "reason": "Idempotence underpins Architecture as Code by keeping the core vocabulary reproducible."
        },
        {
          "term": "architecture_decision_record",
          "relationship": "aligns_with",
          "reason": "Idempotence aligns with Architecture Decision Record so teams reuse verified patterns without drift."
        }
      ],
      "name": "Idempotence",
      "category": "foundation",
      "summary": "The property that a command or template can run repeatedly with the same end result, protecting teams from accidental drift or double execution."
    },
    {
      "id": "infrastructure_as_code",
      "name": "Infrastructure as Code",
      "category": "foundation",
      "summary": "A practice closely related to AaC where infrastructure resources are defined declaratively and managed through version control to deliver predictable environments.",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "implements",
          "reason": "Infrastructure templates implement the platform layer of Architecture as Code models."
        },
        {
          "term": "compliance_automation",
          "relationship": "validated_by",
          "reason": "Compliance automation assesses IaC changes against mandated controls."
        },
        {
          "term": "gitops",
          "relationship": "operated_with",
          "reason": "GitOps reconciles IaC declarations with live environments."
        }
      ]
    },
    {
      "id": "reusable_module",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "underpins",
          "reason": "Reusable Module underpins Architecture as Code by keeping the core vocabulary reproducible."
        },
        {
          "term": "architecture_decision_record",
          "relationship": "aligns_with",
          "reason": "Reusable Module aligns with Architecture Decision Record so teams reuse verified patterns without drift."
        }
      ],
      "name": "Reusable Module",
      "category": "foundation",
      "summary": "A parameterised building block—such as a Terraform module or Helm chart—that encapsulates best practice and is published for teams to compose new solutions quickly."
    },
    {
      "id": "configuration_management",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "operationalises",
          "reason": "Configuration Management operationalises Architecture as Code by automating release and validation work."
        },
        {
          "term": "delivery_pipeline",
          "relationship": "relies_on",
          "reason": "Configuration Management relies on Delivery Pipeline to keep code-defined environments in sync with production."
        }
      ],
      "name": "Configuration Management",
      "category": "delivery",
      "summary": "Tooling such as Ansible or Chef that applies desired system states, often working alongside declarative templates to maintain consistency."
    },
    {
      "id": "container",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "operationalises",
          "reason": "Container operationalises Architecture as Code by automating release and validation work."
        },
        {
          "term": "delivery_pipeline",
          "relationship": "relies_on",
          "reason": "Container relies on Delivery Pipeline to keep code-defined environments in sync with production."
        }
      ],
      "name": "Container",
      "category": "delivery",
      "summary": "A lightweight, portable runtime package that combines application code with dependencies for consistent execution across environments."
    },
    {
      "id": "continuous_integration_continuous_delivery",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "operationalises",
          "reason": "Continuous Integration / Continuous Delivery operationalises Architecture as Code by automating release and validation work."
        },
        {
          "term": "delivery_pipeline",
          "relationship": "relies_on",
          "reason": "Continuous Integration / Continuous Delivery relies on Delivery Pipeline to keep code-defined environments in sync with production."
        }
      ],
      "name": "Continuous Integration / Continuous Delivery",
      "category": "delivery",
      "summary": "A feedback-driven workflow where code changes are integrated, tested, and promoted through automated stages, reducing manual handovers."
    },
    {
      "id": "delivery_pipeline",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "operationalises",
          "reason": "Delivery Pipeline operationalises Architecture as Code by automating release and validation work."
        },
        {
          "term": "version_control_system",
          "relationship": "relies_on",
          "reason": "Delivery Pipeline relies on Version Control System to keep code-defined environments in sync with production."
        }
      ],
      "name": "Delivery Pipeline",
      "category": "delivery",
      "summary": "The orchestrated flow of automated checks, approvals, and deployments that transform committed code into resilient production services."
    },
    {
      "id": "gitops",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "operationalises",
          "reason": "GitOps operationalises Architecture as Code by automating release and validation work."
        },
        {
          "term": "delivery_pipeline",
          "relationship": "relies_on",
          "reason": "GitOps relies on Delivery Pipeline to keep code-defined environments in sync with production."
        }
      ],
      "name": "GitOps",
      "category": "delivery",
      "summary": "Operating models that use a VCS as the single source of truth so that merges trigger automated reconciliation against live environments."
    },
    {
      "id": "helm",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "operationalises",
          "reason": "Helm operationalises Architecture as Code by automating release and validation work."
        },
        {
          "term": "delivery_pipeline",
          "relationship": "relies_on",
          "reason": "Helm relies on Delivery Pipeline to keep code-defined environments in sync with production."
        }
      ],
      "name": "Helm",
      "category": "delivery",
      "summary": "The package manager for Kubernetes that bundles manifests, default values, and documentation into shareable charts."
    },
    {
      "id": "kubernetes",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "operationalises",
          "reason": "Kubernetes operationalises Architecture as Code by automating release and validation work."
        },
        {
          "term": "delivery_pipeline",
          "relationship": "relies_on",
          "reason": "Kubernetes relies on Delivery Pipeline to keep code-defined environments in sync with production."
        }
      ],
      "name": "Kubernetes",
      "category": "delivery",
      "summary": "An open-source orchestration platform that schedules containers, scales workloads, and standardises operational tasks."
    },
    {
      "id": "observability_stack",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "operationalises",
          "reason": "Observability Stack operationalises Architecture as Code by automating release and validation work."
        },
        {
          "term": "delivery_pipeline",
          "relationship": "relies_on",
          "reason": "Observability Stack relies on Delivery Pipeline to keep code-defined environments in sync with production."
        }
      ],
      "name": "Observability Stack",
      "category": "delivery",
      "summary": "The telemetry pipelines, dashboards, and alerting rules that provide actionable insight into system behaviour and guide inclusive on-call collaboration."
    },
    {
      "id": "runbook_automation",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "operationalises",
          "reason": "Runbook Automation operationalises Architecture as Code by automating release and validation work."
        },
        {
          "term": "delivery_pipeline",
          "relationship": "relies_on",
          "reason": "Runbook Automation relies on Delivery Pipeline to keep code-defined environments in sync with production."
        }
      ],
      "name": "Runbook Automation",
      "category": "delivery",
      "summary": "Automated execution of the procedural knowledge once held in runbooks, shortening incident response while keeping humans in control of critical decisions."
    },
    {
      "id": "service_mesh",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "operationalises",
          "reason": "Service Mesh operationalises Architecture as Code by automating release and validation work."
        },
        {
          "term": "delivery_pipeline",
          "relationship": "relies_on",
          "reason": "Service Mesh relies on Delivery Pipeline to keep code-defined environments in sync with production."
        }
      ],
      "name": "Service Mesh",
      "category": "delivery",
      "summary": "A dedicated infrastructure layer that manages service-to-service security, routing, and observability without each team writing bespoke logic."
    },
    {
      "id": "terraform",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "operationalises",
          "reason": "Terraform operationalises Architecture as Code by automating release and validation work."
        },
        {
          "term": "delivery_pipeline",
          "relationship": "relies_on",
          "reason": "Terraform relies on Delivery Pipeline to keep code-defined environments in sync with production."
        }
      ],
      "name": "Terraform",
      "category": "delivery",
      "summary": "A widely used IaC tool that compiles declarative configurations into API calls, offering modular composition and policy enforcement hooks."
    },
    {
      "id": "version_control_system",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "operationalises",
          "reason": "Version Control System operationalises Architecture as Code by automating release and validation work."
        },
        {
          "term": "delivery_pipeline",
          "relationship": "relies_on",
          "reason": "Version Control System relies on Delivery Pipeline to keep code-defined environments in sync with production."
        }
      ],
      "name": "Version Control System",
      "category": "delivery",
      "summary": "A collaborative platform—Git being the most common—that stores source code, policies, and templates, preserving history and peer review."
    },
    {
      "id": "access_federation",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "safeguards",
          "reason": "Access Federation safeguards Architecture as Code by ensuring changes stay compliant."
        },
        {
          "term": "policy_as_code",
          "relationship": "partners_with",
          "reason": "Access Federation partners with Policy as Code so guardrails remain enforceable and transparent."
        }
      ],
      "name": "Access Federation",
      "category": "governance",
      "summary": "Coordinated identity management across platforms so that people have the least-privileged access they need to perform their roles."
    },
    {
      "id": "continuous_compliance",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "safeguards",
          "reason": "Continuous Compliance safeguards Architecture as Code by ensuring changes stay compliant."
        },
        {
          "term": "policy_as_code",
          "relationship": "partners_with",
          "reason": "Continuous Compliance partners with Policy as Code so guardrails remain enforceable and transparent."
        }
      ],
      "name": "Continuous Compliance",
      "category": "governance",
      "summary": "Automated validation that checks regulatory and internal controls with every change, generating evidence that auditors and teams can trust."
    },
    {
      "id": "data_sovereignty",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "safeguards",
          "reason": "Data Sovereignty safeguards Architecture as Code by ensuring changes stay compliant."
        },
        {
          "term": "policy_as_code",
          "relationship": "partners_with",
          "reason": "Data Sovereignty partners with Policy as Code so guardrails remain enforceable and transparent."
        }
      ],
      "name": "Data Sovereignty",
      "category": "governance",
      "summary": "Ensuring data is handled in accordance with applicable legal and regulatory requirements, influencing design choices and deployment regions."
    },
    {
      "id": "policy_as_code",
      "name": "Policy as Code",
      "category": "governance",
      "summary": "The practice of expressing organisational policies in code so they can be versioned, tested, and enforced automatically across platforms.",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "protects",
          "reason": "Policies constrain Architecture as Code deployments to safe, approved patterns."
        },
        {
          "term": "compliance_automation",
          "relationship": "executed_by",
          "reason": "Compliance automation runs policy checks as part of every change."
        },
        {
          "term": "architecture_decision_record",
          "relationship": "referenced_by",
          "reason": "Policy updates are captured in ADRs to preserve organisational memory."
        }
      ]
    },
    {
      "id": "risk_assessment_matrix",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "safeguards",
          "reason": "Risk Assessment Matrix safeguards Architecture as Code by ensuring changes stay compliant."
        },
        {
          "term": "policy_as_code",
          "relationship": "partners_with",
          "reason": "Risk Assessment Matrix partners with Policy as Code so guardrails remain enforceable and transparent."
        }
      ],
      "name": "Risk Assessment Matrix",
      "category": "governance",
      "summary": "A structured view of likelihood versus impact that helps teams evaluate and prioritise mitigations collaboratively."
    },
    {
      "id": "security_policy",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "safeguards",
          "reason": "Security Policy safeguards Architecture as Code by ensuring changes stay compliant."
        },
        {
          "term": "policy_as_code",
          "relationship": "partners_with",
          "reason": "Security Policy partners with Policy as Code so guardrails remain enforceable and transparent."
        }
      ],
      "name": "Security Policy",
      "category": "governance",
      "summary": "A codified set of safeguards—identity, encryption, network, and data-handling—that shapes how architecture components interoperate securely."
    },
    {
      "id": "zero_trust",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "safeguards",
          "reason": "Zero Trust safeguards Architecture as Code by ensuring changes stay compliant."
        },
        {
          "term": "policy_as_code",
          "relationship": "partners_with",
          "reason": "Zero Trust partners with Policy as Code so guardrails remain enforceable and transparent."
        }
      ],
      "name": "Zero Trust",
      "category": "governance",
      "summary": "A security stance that continuously verifies identities, device health, and context before granting access, reducing implicit trust between services."
    },
    {
      "id": "blameless_post_incident_review",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "stabilises",
          "reason": "Blameless Post-Incident Review stabilises Architecture as Code deployments through resilient operating practices."
        },
        {
          "term": "site_reliability_engineering",
          "relationship": "coordinates_with",
          "reason": "Blameless Post-Incident Review coordinates with Site Reliability Engineering to protect reliability and inclusive on-call collaboration."
        }
      ],
      "name": "Blameless Post-Incident Review",
      "category": "operations",
      "summary": "A learning-focused conversation after incidents that identifies systemic improvements without placing personal blame."
    },
    {
      "id": "chaos_engineering",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "stabilises",
          "reason": "Chaos Engineering stabilises Architecture as Code deployments through resilient operating practices."
        },
        {
          "term": "site_reliability_engineering",
          "relationship": "coordinates_with",
          "reason": "Chaos Engineering coordinates with Site Reliability Engineering to protect reliability and inclusive on-call collaboration."
        }
      ],
      "name": "Chaos Engineering",
      "category": "operations",
      "summary": "Intentional experimentation that reveals weaknesses by introducing controlled failure, strengthening resilience and team confidence."
    },
    {
      "id": "chaos_monkey",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "stabilises",
          "reason": "Chaos Monkey stabilises Architecture as Code deployments through resilient operating practices."
        },
        {
          "term": "site_reliability_engineering",
          "relationship": "coordinates_with",
          "reason": "Chaos Monkey coordinates with Site Reliability Engineering to protect reliability and inclusive on-call collaboration."
        }
      ],
      "name": "Chaos Monkey",
      "category": "operations",
      "summary": "A resilience experiment that deliberately terminates running resources to verify automated recovery, typically orchestrated through codified AaC workflows."
    },
    {
      "id": "error_budget",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "stabilises",
          "reason": "Error Budget stabilises Architecture as Code deployments through resilient operating practices."
        },
        {
          "term": "site_reliability_engineering",
          "relationship": "coordinates_with",
          "reason": "Error Budget coordinates with Site Reliability Engineering to protect reliability and inclusive on-call collaboration."
        }
      ],
      "name": "Error Budget",
      "category": "operations",
      "summary": "The agreed allowance for unreliability that guides deployment pace and prioritisation of improvement work."
    },
    {
      "id": "incident_command",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "stabilises",
          "reason": "Incident Command stabilises Architecture as Code deployments through resilient operating practices."
        },
        {
          "term": "site_reliability_engineering",
          "relationship": "coordinates_with",
          "reason": "Incident Command coordinates with Site Reliability Engineering to protect reliability and inclusive on-call collaboration."
        }
      ],
      "name": "Incident Command",
      "category": "operations",
      "summary": "An inclusive, role-based structure that coordinates response efforts during major events so everyone understands responsibilities and communication paths."
    },
    {
      "id": "runway_health_check",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "stabilises",
          "reason": "Runway Health Check stabilises Architecture as Code deployments through resilient operating practices."
        },
        {
          "term": "site_reliability_engineering",
          "relationship": "coordinates_with",
          "reason": "Runway Health Check coordinates with Site Reliability Engineering to protect reliability and inclusive on-call collaboration."
        }
      ],
      "name": "Runway Health Check",
      "category": "operations",
      "summary": "A periodic review of capacity, tooling, and process debt to ensure teams have the runway to deliver sustainable change."
    },
    {
      "id": "service_level_indicator",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "stabilises",
          "reason": "Service Level Indicator stabilises Architecture as Code deployments through resilient operating practices."
        },
        {
          "term": "site_reliability_engineering",
          "relationship": "coordinates_with",
          "reason": "Service Level Indicator coordinates with Site Reliability Engineering to protect reliability and inclusive on-call collaboration."
        }
      ],
      "name": "Service Level Indicator",
      "category": "operations",
      "summary": "The quantitative measurement—such as latency or error rate—that shows whether an SLO is being achieved."
    },
    {
      "id": "service_level_objective",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "stabilises",
          "reason": "Service Level Objective stabilises Architecture as Code deployments through resilient operating practices."
        },
        {
          "term": "site_reliability_engineering",
          "relationship": "coordinates_with",
          "reason": "Service Level Objective coordinates with Site Reliability Engineering to protect reliability and inclusive on-call collaboration."
        }
      ],
      "name": "Service Level Objective",
      "category": "operations",
      "summary": "A shared target for reliability, expressed as a measurable goal that teams use to evaluate whether customer expectations are being met."
    },
    {
      "id": "site_reliability_engineering",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "stabilises",
          "reason": "Site Reliability Engineering stabilises Architecture as Code deployments through resilient operating practices."
        },
        {
          "term": "observability_stack",
          "relationship": "coordinates_with",
          "reason": "Site Reliability Engineering coordinates with Observability Stack to protect reliability and inclusive on-call collaboration."
        }
      ],
      "name": "Site Reliability Engineering",
      "category": "operations",
      "summary": "An engineering discipline that applies software practices to operations work, balancing reliability with delivery velocity."
    },
    {
      "id": "carbon_aware_computing",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "funds",
          "reason": "Carbon-Aware Computing funds Architecture as Code by aligning investments with measurable value."
        },
        {
          "term": "finops",
          "relationship": "balances_with",
          "reason": "Carbon-Aware Computing balances with FinOps to steward spend without slowing delivery."
        }
      ],
      "name": "Carbon-Aware Computing",
      "category": "finance",
      "summary": "Scheduling workloads and scaling strategies to coincide with renewable energy availability, supporting environmental goals."
    },
    {
      "id": "cost_allocation_tag",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "funds",
          "reason": "Cost Allocation Tag funds Architecture as Code by aligning investments with measurable value."
        },
        {
          "term": "finops",
          "relationship": "balances_with",
          "reason": "Cost Allocation Tag balances with FinOps to steward spend without slowing delivery."
        }
      ],
      "name": "Cost Allocation Tag",
      "category": "finance",
      "summary": "Metadata attached to resources that enables transparent reporting by product, team, or initiative."
    },
    {
      "id": "finops",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "funds",
          "reason": "FinOps funds Architecture as Code by aligning investments with measurable value."
        },
        {
          "term": "cost_allocation_tag",
          "relationship": "balances_with",
          "reason": "FinOps balances with Cost Allocation Tag to steward spend without slowing delivery."
        }
      ],
      "name": "FinOps",
      "category": "finance",
      "summary": "A collaborative financial practice that aligns engineering, finance, and product teams on cost efficiency while supporting innovation."
    },
    {
      "id": "reserved_and_spot_capacity",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "funds",
          "reason": "Reserved and Spot Capacity funds Architecture as Code by aligning investments with measurable value."
        },
        {
          "term": "finops",
          "relationship": "balances_with",
          "reason": "Reserved and Spot Capacity balances with FinOps to steward spend without slowing delivery."
        }
      ],
      "name": "Reserved and Spot Capacity",
      "category": "finance",
      "summary": "Cloud purchasing models that trade commitment or flexibility for lower cost, requiring automation to manage safely."
    },
    {
      "id": "resource_quota",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "funds",
          "reason": "Resource Quota funds Architecture as Code by aligning investments with measurable value."
        },
        {
          "term": "finops",
          "relationship": "balances_with",
          "reason": "Resource Quota balances with FinOps to steward spend without slowing delivery."
        }
      ],
      "name": "Resource Quota",
      "category": "finance",
      "summary": "A constraint that limits how much of a resource can be consumed in a namespace or account, preventing unintended overspend."
    },
    {
      "id": "rightsizing",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "funds",
          "reason": "Rightsizing funds Architecture as Code by aligning investments with measurable value."
        },
        {
          "term": "finops",
          "relationship": "balances_with",
          "reason": "Rightsizing balances with FinOps to steward spend without slowing delivery."
        }
      ],
      "name": "Rightsizing",
      "category": "finance",
      "summary": "Optimising resource shapes and reservations based on observed usage to reduce waste without compromising performance."
    },
    {
      "id": "change_management",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "enables",
          "reason": "Change Management enables Architecture as Code by fostering inclusive, collaborative teams."
        },
        {
          "term": "platform_team",
          "relationship": "complements",
          "reason": "Change Management complements Platform Team so people can iterate on Architecture as Code safely."
        }
      ],
      "name": "Change Management",
      "category": "culture",
      "summary": "A transparent approach to guiding people through change with empathy, communication, and supportive training."
    },
    {
      "id": "community_of_practice",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "enables",
          "reason": "Community of Practice enables Architecture as Code by fostering inclusive, collaborative teams."
        },
        {
          "term": "platform_team",
          "relationship": "complements",
          "reason": "Community of Practice complements Platform Team so people can iterate on Architecture as Code safely."
        }
      ],
      "name": "Community of Practice",
      "category": "culture",
      "summary": "An open forum where people with a shared interest learn together, improving patterns and vocabulary across the organisation."
    },
    {
      "id": "cross_functional_team",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "enables",
          "reason": "Cross-Functional Team enables Architecture as Code by fostering inclusive, collaborative teams."
        },
        {
          "term": "platform_team",
          "relationship": "complements",
          "reason": "Cross-Functional Team complements Platform Team so people can iterate on Architecture as Code safely."
        }
      ],
      "name": "Cross-Functional Team",
      "category": "culture",
      "summary": "A team with diverse skills—engineering, security, operations, product, and design—working together from discovery through run-time."
    },
    {
      "id": "devops_culture",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "enables",
          "reason": "DevOps Culture enables Architecture as Code by fostering inclusive, collaborative teams."
        },
        {
          "term": "platform_team",
          "relationship": "complements",
          "reason": "DevOps Culture complements Platform Team so people can iterate on Architecture as Code safely."
        }
      ],
      "name": "DevOps Culture",
      "category": "culture",
      "summary": "The mindset that values shared ownership, rapid feedback, and continuous improvement over siloed handovers."
    },
    {
      "id": "platform_team",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "enables",
          "reason": "Platform Team enables Architecture as Code by fostering inclusive, collaborative teams."
        },
        {
          "term": "devops_culture",
          "relationship": "complements",
          "reason": "Platform Team complements DevOps Culture so people can iterate on Architecture as Code safely."
        }
      ],
      "name": "Platform Team",
      "category": "culture",
      "summary": "A multidisciplinary group that curates reusable services, standards, and documentation so product teams can focus on customer value."
    },
    {
      "id": "psychological_safety",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "enables",
          "reason": "Psychological Safety enables Architecture as Code by fostering inclusive, collaborative teams."
        },
        {
          "term": "platform_team",
          "relationship": "complements",
          "reason": "Psychological Safety complements Platform Team so people can iterate on Architecture as Code safely."
        }
      ],
      "name": "Psychological Safety",
      "category": "culture",
      "summary": "An environment where every team member can contribute ideas or raise concerns without fear, enabling inclusive innovation."
    },
    {
      "id": "servant_leadership",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "enables",
          "reason": "Servant Leadership enables Architecture as Code by fostering inclusive, collaborative teams."
        },
        {
          "term": "platform_team",
          "relationship": "complements",
          "reason": "Servant Leadership complements Platform Team so people can iterate on Architecture as Code safely."
        }
      ],
      "name": "Servant Leadership",
      "category": "culture",
      "summary": "A leadership style that removes obstacles, amplifies team voices, and nurtures growth instead of commanding outcomes."
    },
    {
      "id": "compliance_automation",
      "name": "Compliance Automation",
      "category": "assurance",
      "summary": "Automated controls that continuously validate architectural and operational adherence.",
      "related": [
        {
          "term": "policy_as_code",
          "relationship": "enforced_by",
          "reason": "Policies defined as code are executed within compliance automation pipelines."
        },
        {
          "term": "infrastructure_as_code",
          "relationship": "evaluates",
          "reason": "Compliance jobs analyse IaC artefacts before promotion."
        },
        {
          "term": "knowledge_graph",
          "relationship": "informed_by",
          "reason": "Control execution is prioritised using ownership and impact data from the knowledge graph."
        }
      ]
    },
    {
      "id": "knowledge_graph",
      "name": "Knowledge Graph",
      "category": "insight",
      "summary": "Connected dataset that maps architectural artefacts, policies, and ownership.",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "captures",
          "reason": "Knowledge graphs catalogue the structural elements described by Architecture as Code."
        },
        {
          "term": "compliance_automation",
          "relationship": "feeds",
          "reason": "Compliance automation queries the graph to locate obligated components and metadata."
        }
      ]
    },
    {
      "id": "post_quantum_cryptography",
      "related": [
        {
          "term": "zero_trust",
          "relationship": "reinforces",
          "reason": "Post-Quantum Cryptography reinforces Zero Trust controls by raising the cryptographic baseline against emerging threats."
        },
        {
          "term": "continuous_compliance",
          "relationship": "relies_on",
          "reason": "Post-Quantum Cryptography relies on Continuous Compliance to evidence algorithm upgrades and key rotation."
        }
      ],
      "name": "Post-Quantum Cryptography",
      "category": "governance",
      "summary": "Cryptographic techniques designed to withstand attacks from both classical and quantum computers."
    },
    {
      "id": "digital_twin",
      "related": [
        {
          "term": "architecture_as_code",
          "relationship": "models",
          "reason": "Digital Twin models Architecture as Code blueprints so teams can trial design options without touching production."
        },
        {
          "term": "knowledge_graph",
          "relationship": "draws_from",
          "reason": "Digital Twin draws from the knowledge graph to keep simulations aligned with canonical metadata."
        }
      ],
      "name": "Digital Twin",
      "category": "insight",
      "summary": "A synchronised virtual representation of a system that allows teams to explore changes safely before applying them in production."
    },
    {
      "id": "ai_for_it_operations",
      "related": [
        {
          "term": "observability_stack",
          "relationship": "enhances",
          "reason": "AI for IT Operations enhances the observability stack by surfacing signals that humans might otherwise miss."
        },
        {
          "term": "service_level_objective",
          "relationship": "supports",
          "reason": "AI for IT Operations supports service level objectives by predicting breaches early and recommending corrective action."
        }
      ],
      "name": "AI for IT Operations",
      "category": "operations",
      "summary": "Applying machine learning to operational data to surface anomalies, predict incidents, and guide human responders."
    },
    {
      "id": "sustainability_kpi",
      "related": [
        {
          "term": "carbon_aware_computing",
          "relationship": "tracks",
          "reason": "Sustainability KPI tracks the outcomes of carbon-aware computing strategies so teams can prove environmental impact."
        },
        {
          "term": "finops",
          "relationship": "guides",
          "reason": "Sustainability KPI guides FinOps reviews by keeping ecological considerations visible alongside financial metrics."
        }
      ],
      "name": "Sustainability KPI",
      "category": "finance",
      "summary": "A measurable objective—such as emissions per transaction—that keeps environmental impact visible during planning and prioritisation."
    }
  ]
}
