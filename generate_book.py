import os
import subprocess
import sys

def validate_epub_file(epub_path):
    """
    Validera EPUB-fil med EPUBCheck.
    
    Args:
        epub_path (str): S√∂kv√§g till EPUB-filen
        
    Returns:
        tuple: (success: bool, log_output: str)
    """
    try:
        # Check if EPUBCheck is available
        result = subprocess.run(['epubcheck', '--version'], 
                               capture_output=True, text=True, timeout=10)
        if result.returncode != 0:
            return False, "EPUBCheck √§r inte tillg√§ngligt"
    except (subprocess.TimeoutExpired, FileNotFoundError):
        return False, "EPUBCheck √§r inte installerat eller inte tillg√§ngligt"
    
    try:
        # Run EPUBCheck validation
        print(f"üîç Validerar EPUB-fil: {epub_path}")
        result = subprocess.run(['epubcheck', epub_path], 
                               capture_output=True, text=True, timeout=60)
        
        # Log the validation output
        log_output = result.stdout + result.stderr
        
        if result.returncode == 0:
            print("‚úÖ EPUB-validering godk√§nd")
            return True, log_output
        else:
            print("‚ö†Ô∏è  EPUB-validering avsl√∂jade problem")
            # Count different types of issues
            fatal_count = log_output.count('FATAL')
            error_count = log_output.count('ERROR') - fatal_count  # Subtract fatals from errors
            warning_count = log_output.count('WARNING')
            
            print(f"   - Fatala fel: {fatal_count}")
            print(f"   - Fel: {error_count}")
            print(f"   - Varningar: {warning_count}")
            
            return False, log_output
            
    except subprocess.TimeoutExpired:
        return False, "EPUBCheck timeout - filen kan vara f√∂r stor eller skadad"
    except Exception as e:
        return False, f"Fel vid EPUB-validering: {str(e)}"

def generate_iac_book_content():
    """
    Genererar alla markdown-filer f√∂r boken 'Arkitektur som kod'
    Fokus: Architecture as Code med Infrastructure as Code som praktiskt exempel
    """
    
    # Definiera mappar
    output_dir = "docs"
    images_dir = os.path.join(output_dir, "images")
    
    # Skapa mappar
    os.makedirs(output_dir, exist_ok=True)
    os.makedirs(images_dir, exist_ok=True)
    
    # Bokens struktur med alla 23 filer
    book_structure = [
        {
            "filename": "01_inledning.md",
            "title": "Inledning till arkitektur som kod",
            "area": "Grundl√§ggande koncept",
            "mermaid_code": """graph LR
    A[Traditionell arkitektur] --> B[Manuella processer]
    C[Architecture as Code] --> D[Automatiserade processer] 
    E[Infrastructure as Code] --> F[Praktiskt exempel]""",
            "content": """# Inledning till arkitektur som kod

Arkitektur som kod (Architecture as Code) representerar ett paradigmskifte inom systemutveckling d√§r hela systemarkitekturen definieras, versionshanteras och hanteras genom kod. Detta approach m√∂jligg√∂r samma metodiker som traditionell mjukvaruutveckling f√∂r hela organisationens tekniska landskap.

![Inledning till arkitektur som kod](images/diagram_01_introduction.png)

Diagrammet illustrerar evolutionen fr√•n manuella processer till den omfattande visionen av Architecture as Code, d√§r hela systemarkitekturen kodifieras.

## Evolution mot arkitektur som kod

Traditionella metoder f√∂r systemarkitektur har ofta varit manuella och dokumentbaserade. Architecture as Code bygger p√• etablerade principer fr√•n mjukvaruutveckling och till√§mpar dessa p√• hela systemlandskapet.

Detta inkluderar inte bara infrastrukturkomponenter, utan √§ven applikationsarkitektur, datafl√∂den, s√§kerhetspolicies, compliance-regler och organisatoriska strukturer - allt definierat som kod.

## Definition och omfattning

Architecture as Code definieras som praktiken att beskriva, versionhantera och automatisera hela systemarkitekturen genom maskinl√§sbar kod. Detta omfattar applikationskomponenter, integrationsm√∂nster, dataarkitektur, infrastruktur och organisatoriska processer.

Denna holistiska approach m√∂jligg√∂r end-to-end automatisering d√§r f√∂r√§ndringar i krav automatiskt propagerar genom hela arkitekturen - fr√•n applikationslogik till deployment och monitering.

## Bokens syfte och m√•lgrupp

Denna bok v√§nder sig till systemarkitekter, utvecklare, projektledare och IT-beslutsfattare som vill f√∂rst√• och implementera Architecture as Code i sina organisationer. 

L√§saren kommer att f√• omfattande kunskap om hur hela systemarkitekturen kan kodifieras, fr√•n grundl√§ggande principer till avancerade arkitekturm√∂nster som omfattar hela organisationens digitala ekosystem.

K√§llor:
- ThoughtWorks. "Architecture as Code: The Next Evolution." Technology Radar, 2024.
- Martin, R. "Clean Architecture: A Craftsman's Guide to Software Structure." Prentice Hall, 2017."""
        },
        
        {
            "filename": "02_fundamental_principles.md", 
            "title": "Grundl√§ggande principer f√∂r Architecture as Code",
            "area": "Systemutveckling",
            "mermaid_code": """graph LR
    A[Deklarativ kod] --> B[Versionskontroll]
    B --> C[Automatisering]
    C --> D[Reproducerbarhet]
    D --> E[Skalbarhet]""",
            "content": """# Grundl√§ggande principer f√∂r Architecture as Code

Architecture as Code bygger p√• fundamentala principer som s√§kerst√§ller framg√•ngsrik implementation av kodifierad systemarkitektur. Dessa principer omfattar hela systemlandskapet och skapar en helhetssyn f√∂r arkitekturhantering.

![Grundl√§ggande principer diagram](images/diagram_02_chapter1.png)

Diagrammet visar det naturliga fl√∂det fr√•n deklarativ kod genom versionskontroll och automatisering till reproducerbarhet och skalbarhet - de fem grundpelarna inom Architecture as Code.

## Deklarativ arkitekturdefinition

Den deklarativa approachen inom Architecture as Code inneb√§r att beskriva √∂nskat systemtillst√•nd p√• alla niv√•er - fr√•n applikationskomponenter till infrastruktur. Detta skiljer sig fr√•n imperativ programmering d√§r varje steg m√•ste specificeras explicit.

Deklarativ definition m√∂jligg√∂r att beskriva arkitekturens √∂nskade tillst√•nd, vilket Architecture as Code utvidgar till att omfatta applikationsarkitektur, API-kontrakt och organisatoriska strukturer.

## Helhetsperspektiv p√• kodifiering

Architecture as Code omfattar hela systemekosystemet genom en holistisk approach. Detta inkluderar applikationslogik, datafl√∂den, s√§kerhetspolicies, compliance-regler och organisationsstrukturer.

Ett praktiskt exempel √§r hur en f√∂r√§ndring i en applikations API automatiskt kan propagera genom hela arkitekturen - fr√•n s√§kerhetskonfigurationer till dokumentation - allt eftersom det √§r definierat som kod.

## Immutable architecture patterns

Principen om immutable arkitektur inneb√§r att hela systemarkitekturen hanteras genom of√∂r√§nderliga komponenter. Ist√§llet f√∂r att modifiera befintliga delar skapas nya versioner som ers√§tter gamla p√• alla niv√•er.

Detta skapar f√∂ruts√§gbarhet och eliminerar architectural drift - d√§r system gradvis divergerar fr√•n sin avsedda design √∂ver tid.

## Testbarhet p√• arkitekturniv√•

Architecture as Code m√∂jligg√∂r testning av hela systemarkitekturen, inte bara enskilda komponenter. Detta inkluderar validering av arkitekturm√∂nster, compliance med designprinciper och verifiering av end-to-end-fl√∂den.

Arkitekturtester validerar designbeslut, systemkomplexitet och s√§kerst√§ller att hela arkitekturen fungerar som avsett.

## Documentation as Code

Documentation as Code (DaC) representerar principen att behandla dokumentation som en integrerad del av kodbasen snarare √§n som ett separat artefakt. Detta inneb√§r att dokumentation lagras tillsammans med koden, versionshanteras med samma verktyg och genomg√•r samma kvalitetss√§kringsprocesser som applikationskoden.

### F√∂rdelar med Documentation as Code

**Versionskontroll och historik**: Genom att lagra dokumentation i Git eller andra versionskontrollsystem f√•r organisationer automatisk sp√•rbarhet av f√∂r√§ndringar, m√∂jlighet att √•terst√§lla tidigare versioner och full historik √∂ver dokumentationens utveckling.

**Kollaboration och granskning**: Pull requests och merge-processer s√§kerst√§ller att dokumentations√§ndringar granskas innan de publiceras. Detta f√∂rb√§ttrar kvaliteten och minskar risken f√∂r felaktig eller f√∂r√•ldrad information.

**CI/CD-integration**: Automatiserade pipelines kan generera, validera och publicera dokumentation automatiskt n√§r kod f√∂r√§ndras. Detta eliminerar manuella steg och s√§kerst√§ller att dokumentationen alltid √§r uppdaterad.

### Praktisk implementation

```yaml
# .github/workflows/docs.yml
name: Documentation Build and Deploy
on:
  push:
    paths: ['docs/**', 'README.md']
  pull_request:
    paths: ['docs/**']

jobs:
  build-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm install
        
      - name: Generate documentation
        run: |
          npm run docs:build
          npm run docs:lint
          
      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/dist
```

Moderna verktyg som GitBook, Gitiles och MkDocs m√∂jligg√∂r automatisk generering av webbdokumentation fr√•n Markdown-filer lagrade tillsammans med koden.

## Requirements as Code

Requirements as Code (RaC) transformerar traditionell kravspecifikation fr√•n textdokument till maskinl√§sbar kod som kan exekveras, valideras och automatiseras. Detta paradigmskifte m√∂jligg√∂r kontinuerlig verifiering av att systemet uppfyller sina krav genom hela utvecklingslivscykeln.

### Automatisering och traceability

**Automatiserad validering**: Krav uttryckta som kod kan exekveras automatiskt mot systemet f√∂r att verifiera compliance. Detta eliminerar manuell testning och s√§kerst√§ller konsekvent validering.

**Direkt koppling mellan krav och kod**: Varje systemkomponent kan kopplas tillbaka till specifika krav, vilket skapar fullst√§ndig traceability fr√•n aff√§rsbehov till teknisk implementation.

**Continuous compliance**: F√∂r√§ndringar i systemet valideras automatiskt mot alla definierade krav, vilket f√∂rhindrar regression och s√§kerst√§ller ongoing compliance.

### Praktiskt exempel med Open Policy Agent (OPA)

```yaml
# requirements/security-requirements.yaml
apiVersion: policy/v1
kind: RequirementSet
metadata:
  name: svenska-sakerhetskrav
  version: "1.2"
spec:
  requirements:
    - id: SEC-001
      type: security
      description: "Alla S3 buckets m√•ste ha kryptering aktiverad"
      priority: critical
      compliance: ["GDPR", "ISO27001"]
      policy: |
        package security.s3_encryption
        
        deny[msg] {
          input.resource_type == "aws_s3_bucket"
          not input.server_side_encryption_configuration
          msg := "S3 bucket m√•ste ha server-side encryption"
        }
    
    - id: GDPR-001
      type: compliance  
      description: "Persondata m√•ste lagras inom EU/EES"
      priority: critical
      compliance: ["GDPR"]
      policy: |
        package compliance.data_residency
        
        deny[msg] {
          input.resource_type == "aws_rds_instance"
          not contains(input.availability_zone, "eu-")
          msg := "RDS instans m√•ste placeras i EU-region"
        }
```

### Validering och test-automation

Requirements as Code integreras naturligt med test-automation genom att krav blir executable specifications:

```python
# test/requirements_validation.py
import yaml
import opa

class RequirementsValidator:
    def __init__(self, requirements_file: str):
        with open(requirements_file, 'r') as f:
            self.requirements = yaml.safe_load(f)
    
    def validate_requirement(self, req_id: str, system_config: dict):
        requirement = self.find_requirement(req_id)
        policy_result = opa.evaluate(
            requirement['policy'], 
            system_config
        )
        return {
            'requirement_id': req_id,
            'status': 'passed' if not policy_result else 'failed',
            'violations': policy_result
        }
    
    def validate_all_requirements(self) -> dict:
        results = []
        for req in self.requirements['spec']['requirements']:
            result = self.validate_requirement(req['id'], self.system_config)
            results.append(result)
        
        return {
            'total_requirements': len(self.requirements['spec']['requirements']),
            'passed': len([r for r in results if r['status'] == 'passed']),
            'failed': len([r for r in results if r['status'] == 'failed']),
            'details': results
        }
```

Svenska organisationer drar s√§rskild nytta av Requirements as Code f√∂r att automatiskt validera GDPR-compliance, finansiella regleringar och myndighetskrav som konstant m√•ste uppfyllas.

K√§llor:
- Red Hat. "Architecture as Code Principles and Best Practices." Red Hat Developer.
- Martin, R. "Clean Architecture: A Craftsman's Guide to Software Structure." Prentice Hall, 2017.
- ThoughtWorks. "Architecture as Code: The Next Evolution." Technology Radar, 2024.
- GitLab. "Documentation as Code: Best Practices and Implementation." GitLab Documentation, 2024.
- Open Policy Agent. "Policy as Code: Expressing Requirements as Code." CNCF OPA Project, 2024.
- Atlassian. "Documentation as Code: Treating Docs as a First-Class Citizen." Atlassian Developer, 2023.
- NIST. "Requirements Engineering for Secure Systems." NIST Special Publication 800-160, 2023."""
        },
        
        # Resterande 21 kapitel kommer h√§r (f√∂rkortade f√∂r brevity)
        {
            "filename": "03_version_control.md",
            "title": "Versionhantering och kodstruktur", 
            "area": "Systemutveckling",
            "mermaid_code": """graph LR
    A[Git repository] --> B[Branching strategy]
    B --> C[Code review]
    C --> D[Merge process]
    D --> E[Deployment]""",
            "content": """# Versionhantering och kodstruktur

Effektiv versionhantering utg√∂r ryggraden i Infrastructure as Code-implementationer. Genom att till√§mpa samma metoder som mjukvaruutveckling p√• infrastrukturdefinitioner skapas sp√•rbarhet, samarbetsm√∂jligheter och kvalitetskontroll.

![Versionhantering och kodstruktur](images/diagram_03_chapter2.png)

Diagrammet illustrerar det typiska fl√∂det fr√•n Git repository genom branching strategy och code review till slutlig deployment, vilket s√§kerst√§ller kontrollerad och sp√•rbar infrastrukturutveckling.

## Git-baserad arbetsfl√∂de f√∂r infrastruktur

Git utg√∂r standarden f√∂r versionhantering av IaC-kod och m√∂jligg√∂r distribuerat samarbete mellan team-medlemmar. Varje f√∂r√§ndring dokumenteras med commit-meddelanden som beskriver vad som √§ndrats och varf√∂r, vilket skapar en komplett historik √∂ver infrastrukturutvecklingen.

## Kodorganisation och modulstruktur

V√§lorganiserad kodstruktur √§r avg√∂rande f√∂r maintainability och collaboration i st√∂rre IaC-projekt. Modul√§r design m√∂jligg√∂r √•teranv√§ndning av infrastrukturkomponenter across olika projekt och milj√∂er.

K√§llor:
- Atlassian. "Git Workflows for Infrastructure as Code." Atlassian Git Documentation."""
        }
    ]
    
    # Skapa alla markdown-filer
    markdown_files = []
    mermaid_files = []
    
    for item_data in book_structure:
        filename = item_data["filename"]
        content = item_data["content"]
        mermaid_code = item_data.get("mermaid_code")
        
        print(f"Skapar {filename}...")
        
        # Hantera Mermaid-diagram om de finns
        if mermaid_code:
            image_name_base = f"diagram_{filename.split('.')[0]}"
            mermaid_file = os.path.join(images_dir, f"{image_name_base}.mmd")
            
            with open(mermaid_file, "w", encoding="utf-8") as f:
                f.write(mermaid_code.strip())
            
            mermaid_files.append(mermaid_file)
            print(f"Mermaid-diagram sparat till {mermaid_file}")
        
        # Skapa markdown-fil
        markdown_path = os.path.join(output_dir, filename)
        with open(markdown_path, "w", encoding="utf-8") as f:
            f.write(content.strip())
        
        os.chmod(markdown_path, 0o644)
        markdown_files.append(filename)
        print(f"Fil {filename} skapad framg√•ngsrikt.")
    
    print(f"\n=== ITERATION 1 KOMPLETT ===")
    print(f"Totalt {len(markdown_files)} markdown-filer skapade")
    print(f"Totalt {len(mermaid_files)} mermaid-diagram skapade") 

if __name__ == "__main__":
    print("=" * 80)
    print("üìö GENERATE_BOOK.PY - ENGLISH MIGRATION NOTICE")
    print("=" * 80)
    print()
    print("‚ö†Ô∏è  CONTENT GENERATION DISABLED")
    print()
    print("This script previously generated Swedish content.")
    print("The repository now uses English markdown files exclusively.")
    print()
    print("English content is maintained manually in the docs/ directory.")
    print("The generate_iac_book_content() function has been disabled to prevent")
    print("overwriting the English files with Swedish content.")
    print()
    print("If you need to regenerate content, please:")
    print("  1. Update the book_structure in generate_iac_book_content() to use English")
    print("  2. Uncomment the function call below")
    print("  3. Run this script")
    print()
    print("=" * 80)
    print()
    
    # Content generation disabled - uncomment to regenerate
    # generate_iac_book_content()
    
    # EPUB validation is still active
    epub_path = "docs/architecture_as_code.epub"
    if os.path.exists(epub_path):
        print("üìñ Checking existing EPUB file...")
        success, log_output = validate_epub_file(epub_path)
        
        # Save validation log
        log_path = "docs/epub-validation.log"
        try:
            with open(log_path, 'w', encoding='utf-8') as f:
                f.write(f"EPUB validation log for: {epub_path}\n")
                f.write(f"Date: {subprocess.run(['date'], capture_output=True, text=True).stdout}")
                f.write(f"Status: {'APPROVED' if success else 'ERRORS FOUND'}\n")
                f.write("=" * 50 + "\n")
                f.write(log_output)
            print(f"üìÑ Validation log saved: {log_path}")
        except Exception as e:
            print(f"‚ö†Ô∏è  Could not save validation log: {e}")
    else:
        print("‚ÑπÔ∏è  No EPUB file found to validate")
    
    print()
    print("‚úÖ Script completed")