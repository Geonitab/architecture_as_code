name: Assign Codex & run task for PRs linked to issues

on:
  pull_request:
    types: [opened, reopened, ready_for_review, synchronize]

permissions:
  contents: read
  pull-requests: write
  issues: read

jobs:
  assign-and-codex:
    runs-on: ubuntu-latest

    steps:
      # 1) Check out the PR‚Äôs merge reference so Codex can inspect the full diff
      - name: Check out PR (merge ref)
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ github.event.pull_request.number }}/merge

      - name: Prefetch base & head refs
        run: |
          git fetch --no-tags origin \
            ${{ github.event.pull_request.base.ref }} \
            +refs/pull/${{ github.event.pull_request.number }}/head

      # 2) (Keep any existing "assign" logic here if your workflow
      #     already auto-assigns reviewers or labels ‚Äì leave those steps
      #     above or below this section as needed.)

      # 3) Detect issues linked to the PR via GraphQL (closingIssuesReferences)
      - name: Detect linked issues
        id: linked
        env:
          GH_TOKEN: ${{ github.token }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          q='query($owner:String!,$repo:String!,$number:Int!){
            repository(owner:$owner,name:$repo){
              pullRequest(number:$number){
                closingIssuesReferences(first: 10){ nodes { number title } }
              }
            }
          }'
          data=$(gh api graphql -f query="$q" -F owner="$OWNER" -F repo="$REPO" -F number="$PR_NUMBER")
          nums=$(echo "$data" | jq -r '.data.repository.pullRequest.closingIssuesReferences.nodes | map(.number) | join(",")')
          if [[ -n "$nums" ]]; then
            echo "has=true" >> $GITHUB_OUTPUT
            echo "numbers=$nums" >> $GITHUB_OUTPUT
          else
            echo "has=false" >> $GITHUB_OUTPUT
          fi

      - name: Skip if PR has no linked issues
        if: steps.linked.outputs.has != 'true'
        run: echo "No linked issues ‚Üí skipping Codex run."

      # 4) Retrieve the first linked issue for additional context in the prompt
      - name: Fetch first linked issue
        if: steps.linked.outputs.has == 'true'
        id: issue
        env:
          GH_TOKEN: ${{ github.token }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
        run: |
          first=$(echo "${{ steps.linked.outputs.numbers }}" | awk -F',' '{print $1}')
          issue_json=$(gh api repos/$OWNER/$REPO/issues/$first)
          echo "num=$first" >> $GITHUB_OUTPUT
          echo "title=$(echo "$issue_json" | jq -r .title)" >> $GITHUB_OUTPUT
          {
            echo "body<<'EOF'"
            echo "$issue_json" | jq -r .body
            echo "EOF"
          } >> $GITHUB_OUTPUT

      # 5) Run Codex as an ‚Äúautonomous task‚Äù for this PR + issue combination
      - name: Run Codex task for PR + linked issue
        if: steps.linked.outputs.has == 'true'
        id: run_codex
        uses: openai/codex-action@v1
        with:
          openai-api-key: ${{ secrets.OPENAI_API_KEY }}
          safety-strategy: read-only   # read the repo, do not write locally
          prompt: |
            You are Codex running as an automated task for PR #${{ github.event.pull_request.number }}
            in ${{ github.repository }}. The PR is linked to issue(s) #${{ steps.linked.outputs.numbers }}.

            Objectives:
            - Read the linked issue details and the PR diff.
            - If the PR already resolves the issue, write a concise verification note.
            - Otherwise, propose precise follow-ups (edits, tests, documentation) and include concrete unified diff hunks.

            Repository context:
            - Base SHA: ${{ github.event.pull_request.base.sha }}
            - Head SHA: ${{ github.event.pull_request.head.sha }}

            Linked issue (number, title, then body):
            #${{ steps.issue.outputs.num }} ‚Äî ${{ steps.issue.outputs.title }}
            ---
            ${{ steps.issue.outputs.body }}

            Pull request title and body:
            ---
            ${{ github.event.pull_request.title }}

            ${{ github.event.pull_request.body }}

            Output format:
            1) One-paragraph summary.
            2) Checklist of actionable items.
            3) If proposing changes, include unified diff hunks ready to apply.

      # 6) Post the Codex result as a comment on the PR
      - name: Post Codex result as PR comment
        if: steps.linked.outputs.has == 'true' && steps.run_codex.outputs.final-message != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body:
                "ü§ñ **Codex task result (linked to issue(s) #${{ steps.linked.outputs.numbers }})**\n\n" +
                ${{ toJSON(steps.run_codex.outputs['final-message']) }}
            })