name: Auto draft PR from issue + Codex auto-fix for PRs linked to issues

on:
  issues:
    types: [opened, reopened]
  pull_request:
    types: [opened, reopened, ready_for_review, synchronize]

permissions:
  contents: write
  pull-requests: write
  issues: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.run_id }}
  cancel-in-progress: false

jobs:
  # ------------------------------------------------------------
  # Job A – When an issue is opened/reopened:
  # Create or reuse a draft PR, then run Codex. If no diffs,
  # still commit an OpenAI.md update to prove the flow.
  # ------------------------------------------------------------
  create_or_reuse_draft_pr:
    if: github.event_name == 'issues'
    runs-on: ubuntu-latest
    env:
      REPO: ${{ github.repository }}
      ISSUE_NUMBER: ${{ github.event.issue.number }}
      ISSUE_TITLE: ${{ github.event.issue.title }}
      GH_TOKEN: ${{ github.token }}

    steps:
      - name: Enable debug logging
        run: echo "ACTIONS_STEP_DEBUG=true" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Determine default branch
        run: |
          set -euo pipefail
          DEFAULT_BRANCH=$(gh repo view "$REPO" --json defaultBranchRef --jq .defaultBranchRef.name)
          echo "DEFAULT_BRANCH=$DEFAULT_BRANCH" >> $GITHUB_ENV

      - name: Find or create branch with empty commit
        shell: bash
        run: |
          set -euo pipefail
          PREFIX="refs/heads/codex/issue-${ISSUE_NUMBER}-*"
          EXISTING=$(git ls-remote --heads origin "$PREFIX" | awk '{print $2}' | sed 's#refs/heads/##' | head -n1 || true)

          if [[ -n "${EXISTING:-}" ]]; then
            BRANCH="$EXISTING"
            echo "::debug::Reusing branch: $BRANCH"
            git fetch origin "$BRANCH" --depth=1
            git switch -C "$BRANCH" "origin/$BRANCH"
          else
            SLUG=$(printf '%s' "$ISSUE_TITLE" \
              | tr '[:upper:]' '[:lower:]' \
              | tr -cs 'a-z0-9' '-' \
              | sed 's/^-//;s/-$//' \
              | cut -c1-40)
            BRANCH="codex/issue-${ISSUE_NUMBER}${SLUG:+-$SLUG}"

            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git fetch origin "$DEFAULT_BRANCH" --depth=1
            git switch -c "$BRANCH" "origin/$DEFAULT_BRANCH"
            git commit --allow-empty -m "Init draft for issue #${ISSUE_NUMBER}"
            git push --set-upstream origin "$BRANCH"
          fi

          echo "BRANCH=$BRANCH" >> $GITHUB_ENV

      - name: Ensure draft PR exists (create if missing)
        id: ensure_draft
        run: |
          set -euo pipefail

          # Try view by head branch
          if gh pr view "$BRANCH" --json number,url --repo "$REPO" >/tmp/pr.json 2>/dev/null; then
            PR_NUMBER=$(jq -r .number </tmp/pr.json)
            PR_URL=$(jq -r .url </tmp/pr.json)
          else
            PR_URL=$(gh pr create \
              --base "$DEFAULT_BRANCH" \
              --head "$BRANCH" \
              --title "Draft: Issue #$ISSUE_NUMBER – $ISSUE_TITLE" \
              --body "This draft PR was auto-created for **Issue #$ISSUE_NUMBER**.\n\nCloses #$ISSUE_NUMBER" \
              --draft \
              --repo "$REPO")
            PR_NUMBER=$(gh pr view "$BRANCH" --json number --jq .number --repo "$REPO")
          fi

          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          echo "PR_URL=$PR_URL" >> $GITHUB_ENV
          echo "pr_number=$PR_NUMBER" >> "$GITHUB_OUTPUT"
          echo "pr_url=$PR_URL" >> "$GITHUB_OUTPUT"

      - name: Read PR metadata
        id: prsha
        run: |
          set -euo pipefail
          pr=$(gh pr view "$PR_NUMBER" --json headRefOid,baseRefOid,title,body,number)
          echo "base_sha=$(echo "$pr" | jq -r .baseRefOid)" >> "$GITHUB_OUTPUT"
          echo "head_sha=$(echo "$pr" | jq -r .headRefOid)" >> "$GITHUB_OUTPUT"
          echo "pr_title=$(echo "$pr" | jq -r .title)" >> "$GITHUB_OUTPUT"
          {
            echo "pr_body<<EOF"
            echo "$(echo "$pr" | jq -r .body)"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Detect linked issues (with fallback to current issue)
        id: linked_issue_in_job_a
        shell: bash
        env:
          OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          set -euo pipefail
          q='query($owner:String!,$repo:String!,$number:Int!){
            repository(owner:$owner,name:$repo){
              pullRequest(number:$number){
                closingIssuesReferences(first:10){nodes{number title}}
              }
            }
          }'
          nums=""
          for i in 1 2 3; do
            data=$(gh api graphql -f query="$q" -F owner="$OWNER" -F repo="$REPO_NAME" -F number="$PR_NUMBER" || true)
            nums=$(echo "$data" | jq -r '.data.repository.pullRequest.closingIssuesReferences.nodes|map(.number)|join(",")' 2>/dev/null || true)
            [[ -n "$nums" ]] && break || sleep 2
          done
          if [[ -z "$nums" ]]; then
            nums="${ISSUE_NUMBER}"
          fi
          FIRST=$(echo "$nums" | awk -F',' '{print $1}')
          echo "has=true" >> "$GITHUB_OUTPUT"
          echo "numbers=$nums" >> "$GITHUB_OUTPUT"
          echo "first=$FIRST" >> "$GITHUB_OUTPUT"

      - name: Checkout PR head branch (writes allowed)
        uses: actions/checkout@v5
        with:
          ref: ${{ env.BRANCH }}
          persist-credentials: true

      - name: Run Codex task (writes enabled)
        id: run_codex_a
        uses: openai/codex-action@v1
        timeout-minutes: 20
        continue-on-error: true
        with:
          openai-api-key: ${{ secrets.OPENAI_API_KEY }}
          prompt: |
            You are Codex working on branch "${{ env.BRANCH }}" for PR #${{ env.PR_NUMBER }}.
            The PR is linked to issue(s) #${{ steps.linked_issue_in_job_a.outputs.numbers }}.
            Goal:
            - Make the necessary code edits directly in the workspace to resolve the linked issue(s).
            - Prefer minimal, targeted edits. Update tests or docs if relevant.
            - After edits, print a short summary of what changed.

            Context:
            - Base SHA: ${{ steps.prsha.outputs.base_sha }}
            - Head SHA: ${{ steps.prsha.outputs.head_sha }}
            - PR title: ${{ steps.prsha.outputs.pr_title }}
            - PR body:
            ${{ steps.prsha.outputs.pr_body }}

      - name: Commit & push Codex changes (or OpenAI.md fallback)
        shell: bash
        env:
          TZ: Europe/Stockholm
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          if [[ -n "$(git status --porcelain)" ]]; then
            # Codex produced file changes
            git add -A
            git commit -m "Codex auto-fix for issue(s) #${{ steps.linked_issue_in_job_a.outputs.numbers }}"
            git push origin "${BRANCH}"
            echo "::notice::Committed and pushed Codex changes to ${BRANCH}"
          else
            # No file changes -> ensure OpenAI.md gets an entry so the flow always completes
            TS=$(date '+%Y-%m-%d %H:%M:%S %Z')
            {
              echo "## No changes suggested"
              echo ""
              echo "- Issue: #${ISSUE_NUMBER}"
              echo "- PR: #${PR_NUMBER}"
              echo "- Timestamp: ${TS}"
              echo ""
              echo "OpenAI/Codex did not propose any code edits for this issue. This entry ensures the automation flow remains verifiable end-to-end."
              echo ""
            } >> OpenAI.md

            git add OpenAI.md
            git commit -m "Record: No Codex changes suggested for issue #${ISSUE_NUMBER}"
            git push origin "${BRANCH}"
            echo "::notice::No code changes from Codex — updated OpenAI.md instead."
          fi

  # ------------------------------------------------------------
  # Job B – On PR events: run Codex on updates/sync and push.
  # If no changes, still update OpenAI.md to make flow observable.
  # ------------------------------------------------------------
  assign_and_codex:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}

    steps:
      - name: Checkout PR head (writes allowed)
        uses: actions/checkout@v5
        with:
          ref: refs/pull/${{ github.event.pull_request.number }}/head
          persist-credentials: true
          fetch-depth: 0

      - name: Prefetch base & head refs
        run: |
          git fetch --no-tags origin \
            ${{ github.event.pull_request.base.ref }} \
            +refs/pull/${{ github.event.pull_request.number }}/head

      - name: Detect linked issues
        id: linked
        env:
          OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          set -euo pipefail
          q='query($owner:String!,$repo:String!,$number:Int!){
            repository(owner:$owner,name:$repo){
              pullRequest(number:$number){
                closingIssuesReferences(first:10){nodes{number title}}
              }
            }
          }'
          data=$(gh api graphql -f query="$q" -F owner="$OWNER" -F repo="$REPO_NAME" -F number="$PR_NUMBER")
          nums=$(echo "$data" | jq -r '.data.repository.pullRequest.closingIssuesReferences.nodes|map(.number)|join(",")')
          if [[ -n "$nums" ]]; then
            echo "has=true" >> $GITHUB_OUTPUT
            echo "numbers=$nums" >> $GITHUB_OUTPUT
          else
            echo "has=false" >> $GITHUB_OUTPUT
          fi

      - name: Skip if PR has no linked issues
        if: steps.linked.outputs.has != 'true'
        run: echo "No linked issues → skipping Codex run."

      - name: Run Codex task on PR head (writes enabled)
        if: steps.linked.outputs.has == 'true'
        id: run_codex
        uses: openai/codex-action@v1
        timeout-minutes: 20
        continue-on-error: true
        with:
          openai-api-key: ${{ secrets.OPENAI_API_KEY }}
          prompt: |
            You are Codex working directly on the PR's head branch (#${{ github.event.pull_request.number }}).
            The PR is linked to issue(s) #${{ steps.linked.outputs.numbers }}.
            Make the necessary code edits directly in the workspace to resolve those issues.
            Update tests/docs if needed, then print a concise summary.

            Context:
            - Base SHA: ${{ github.event.pull_request.base.sha }}
            - Head SHA: ${{ github.event.pull_request.head.sha }}

      - name: Commit & push Codex changes (or OpenAI.md fallback)
        if: steps.linked.outputs.has == 'true'
        shell: bash
        env:
          TZ: Europe/Stockholm
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          HEAD_REF="${{ github.head_ref }}"
          if [[ -z "$HEAD_REF" ]]; then
            HEAD_REF=$(git rev-parse --abbrev-ref HEAD)
          fi

          if [[ -n "$(git status --porcelain)" ]]; then
            git add -A
            git commit -m "Codex auto-fix for issue(s) #${{ steps.linked.outputs.numbers }}"
            git push origin "$HEAD_REF"
            echo "::notice::Committed and pushed Codex changes to ${HEAD_REF}"
          else
            TS=$(date '+%Y-%m-%d %H:%M:%S %Z')
            {
              echo "## No changes suggested (PR sync)"
              echo ""
              echo "- PR: #${{ github.event.pull_request.number }}"
              echo "- Linked issues: #${{ steps.linked.outputs.numbers }}"
              echo "- Timestamp: ${TS}"
              echo ""
              echo "OpenAI/Codex did not propose further changes on this PR event."
              echo ""
            } >> OpenAI.md
            git add OpenAI.md
            git commit -m "Record: No Codex changes suggested on PR #${{ github.event.pull_request.number }}"
            git push origin "$HEAD_REF"
            echo "::notice::No code changes from Codex — updated OpenAI.md instead."
          fi