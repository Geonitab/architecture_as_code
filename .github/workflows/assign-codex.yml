name: Auto draft PR from issue + Codex auto-fix for PRs linked to issues

#on:
  issues:
    types: [opened, reopened]
  pull_request:
    types: [opened, reopened, ready_for_review, synchronize]

permissions:
  contents: write
  pull-requests: write
  issues: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.event.issue.number || github.event.pull_request.number }}
  cancel-in-progress: false

jobs:
  # ------------------------------------------------------------
  # Job A – Issue events → branch + draft PR + Codex
  # If no changes → update OpenAI.md
  # If .github/workflows/* changed → create separate proposal PR
  # ------------------------------------------------------------
  create_or_reuse_draft_pr:
    if: github.event_name == 'issues'
    runs-on: ubuntu-latest
    env:
      REPO: ${{ github.repository }}
      ISSUE_NUMBER: ${{ github.event.issue.number }}
      ISSUE_TITLE: ${{ github.event.issue.title }}
      GH_TOKEN: ${{ github.token }}
      TZ: Europe/Stockholm
    steps:
      - name: Enable debug logging
        run: echo "ACTIONS_STEP_DEBUG=true" >> "$GITHUB_ENV"

      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Determine default branch
        run: |
          set -euo pipefail
          DEFAULT_BRANCH="$(gh repo view "$REPO" --json defaultBranchRef --jq .defaultBranchRef.name)"
          echo "DEFAULT_BRANCH=$DEFAULT_BRANCH" >> "$GITHUB_ENV"

      - name: Find or create branch with empty commit
        run: |
          set -euo pipefail
          PREFIX="refs/heads/codex/issue-${ISSUE_NUMBER}-*"
          EXISTING="$(git ls-remote --heads origin "$PREFIX" | awk '{print $2}' | sed 's#refs/heads/##' | head -n1 || true)"
          if [[ -n "${EXISTING:-}" ]]; then
            BRANCH="$EXISTING"
            echo "::debug::Reusing branch: $BRANCH"
            git fetch origin "$BRANCH" --depth=1
            git switch -C "$BRANCH" "origin/$BRANCH"
          else
            # slugify issue title (lowercase, keep a–z0–9, collapse to '-')
            SLUG="$(printf '%s' "$ISSUE_TITLE" \
              | tr '[:upper:]' '[:lower:]' \
              | tr -cs 'a-z0-9' '-' \
              | sed 's/^-//; s/-$//; s/--*/-/g' \
              | cut -c1-40)"
            BRANCH="codex/issue-${ISSUE_NUMBER}${SLUG:+-$SLUG}"
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git fetch origin "$DEFAULT_BRANCH" --depth=1
            git switch -c "$BRANCH" "origin/$DEFAULT_BRANCH"
            git commit --allow-empty -m "Init draft for issue #${ISSUE_NUMBER}"
            if ! git push --set-upstream origin "$BRANCH"; then
              echo "::warning::Push failed (likely ref already exists). Reusing remote branch."
              git fetch origin "$BRANCH" --depth=1
              git switch -C "$BRANCH" "origin/$BRANCH"
            fi
          fi
          echo "BRANCH=$BRANCH" >> "$GITHUB_ENV"

      - name: Ensure draft PR exists (create if missing)
        id: ensure_draft
        run: |
          set -euo pipefail
          if gh pr view "$BRANCH" --json number,url --repo "$REPO" >/tmp/pr.json 2>/dev/null; then
            PR_NUMBER="$(jq -r .number </tmp/pr.json)"
            PR_URL="$(jq -r .url </tmp/pr.json)"
          else
            PR_URL="$(gh pr create \
              --base "$DEFAULT_BRANCH" \
              --head "$BRANCH" \
              --title "Draft: Issue #$ISSUE_NUMBER – $ISSUE_TITLE" \
              --body "This draft PR was auto-created for Issue #$ISSUE_NUMBER.\n\nCloses #$ISSUE_NUMBER" \
              --draft \
              --repo "$REPO")"
            PR_NUMBER="$(gh pr view "$BRANCH" --json number --jq .number --repo "$REPO")"
          fi
          {
            echo "PR_NUMBER=$PR_NUMBER"
            echo "PR_URL=$PR_URL"
          } >> "$GITHUB_ENV"
          echo "pr_number=$PR_NUMBER" >> "$GITHUB_OUTPUT"

      - name: Read PR metadata
        id: prsha
        run: |
          set -euo pipefail
          pr="$(gh pr view "$PR_NUMBER" --json headRefOid,baseRefOid,title,number)"
          echo "base_sha=$(echo "$pr" | jq -r .baseRefOid)" >> "$GITHUB_OUTPUT"
          echo "head_sha=$(echo "$pr" | jq -r .headRefOid)" >> "$GITHUB_OUTPUT"
          echo "pr_title=$(echo "$pr" | jq -r .title)" >> "$GITHUB_OUTPUT"

      - name: Detect linked issues (fallback to current issue)
        id: linked_issue_in_job_a
        env:
          OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          set -euo pipefail
          q='query($owner:String!,$repo:String!,$number:Int!){
            repository(owner:$owner,name:$repo){
              pullRequest(number:$number){
                closingIssuesReferences(first:10){nodes{number}}
              }
            }
          }'
          nums=""
          for i in 1 2 3; do
            data="$(gh api graphql -f query="$q" -F owner="$OWNER" -F repo="$REPO_NAME" -F number="$PR_NUMBER" || true)"
            nums="$(echo "$data" | jq -r '.data.repository.pullRequest.closingIssuesReferences.nodes|map(.number)|join(",")' 2>/dev/null || true)"
            [[ -n "$nums" ]] && break || sleep 2
          done
          if [[ -z "$nums" ]]; then nums="${ISSUE_NUMBER}"; fi
          echo "has=true" >> "$GITHUB_OUTPUT"
          echo "numbers=$nums" >> "$GITHUB_OUTPUT"

      - name: Build Codex prompt (env block)
        id: build_prompt_a
        env:
          ISSUE_NUMBERS: ${{ steps.linked_issue_in_job_a.outputs.numbers }}
          PR_NUM: ${{ env.PR_NUMBER }}
          BRANCH_NAME: ${{ env.BRANCH }}
          BASE_SHA: ${{ steps.prsha.outputs.base_sha }}
          HEAD_SHA: ${{ steps.prsha.outputs.head_sha }}
          PR_TITLE: ${{ steps.prsha.outputs.pr_title }}
          CODEX_PROMPT: |
            You are Codex working on branch "${BRANCH_NAME}" for PR #${PR_NUM}.
            The PR is linked to issue(s) #${ISSUE_NUMBERS}.
            Goal:
            - Make minimal, targeted code edits in the workspace to resolve the linked issue(s).
            - Update tests and docs when relevant.
            - Print a concise summary of what changed.
            Context:
            - Base SHA: ${BASE_SHA}
            - Head SHA: ${HEAD_SHA}
            - PR title: ${PR_TITLE}
        run: echo "OK"

      - name: Checkout PR head branch (write access)
        uses: actions/checkout@v5
        with:
          ref: ${{ env.BRANCH }}
          persist-credentials: true

      - name: Run Codex task (write enabled)
        id: run_codex_a
        uses: openai/codex-action@v1
        timeout-minutes: 20
        continue-on-error: true
        with:
          openai-api-key: ${{ secrets.OPENAI_API_KEY }}
          prompt: ${{ env.CODEX_PROMPT }}

      - name: Prepare commit set; split workflow changes to proposal
        id: split_workflow_changes
        env:
          PROPOSAL_README: |
            # Workflow change proposal (manual apply required)
            This repository's automation token lacks the `workflows` permission.
            The attached patch and `.proposed` copies show the intended changes under `.github/workflows/`.
            A maintainer with the proper permission must apply these changes.
            How to apply:
            1. Review `workflows-*.patch` and the `*.proposed` files.
            2. Apply the patch locally, or copy the proposed content into the respective files under `.github/workflows/`.
            3. Commit and push from an account with `workflows` permission.
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          CHANGED="$(git status --porcelain | awk '{print $2}')"
          echo "changed=$CHANGED" >> "$GITHUB_OUTPUT"
          mapfile -t WF_FILES < <(printf '%s\n' $CHANGED | grep -E '^\.github/workflows/' || true)
          if (( ${#WF_FILES[@]} )); then
            echo "has_wf_changes=true" >> "$GITHUB_OUTPUT"
            TS="$(date '+%Y%m%d-%H%M%S')"
            mkdir -p proposals/workflows
            git diff -- ${WF_FILES[@]} > "proposals/workflows/workflows-${TS}.patch" || true
            for f in "${WF_FILES[@]}"; do
              cp -f "$f" "proposals/workflows/$(basename "$f").proposed" || true
            done
            printf "%s\n" "$PROPOSAL_README" > proposals/workflows/README.md
            git checkout -- ${WF_FILES[@]} || true
            git add proposals/workflows || true
          else
            echo "has_wf_changes=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Commit & push main PR changes (retry) or OpenAI.md fallback
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          if [[ -n "$(git status --porcelain)" ]]; then
            git add -A
            git commit -m "Codex auto-fix for issue(s) #${{ steps.linked_issue_in_job_a.outputs.numbers }}"
          else
            TS="$(date '+%Y-%m-%d %H:%M:%S %Z')"
            {
              echo "## No changes suggested"
              echo ""
              echo "- Issue: #${ISSUE_NUMBER}"
              echo "- PR: #${PR_NUMBER}"
              echo "- Timestamp: ${TS}"
              echo ""
              echo "OpenAI/Codex did not propose any code edits for this issue. This entry ensures the automation flow remains verifiable end-to-end."
              echo ""
            } >> OpenAI.md
            git add OpenAI.md
            git commit -m "Record: No Codex changes suggested for issue #${ISSUE_NUMBER}"
          fi
          if ! git push origin "${BRANCH}"; then
            echo "::warning::Push failed. Fetch + retry."
            git fetch origin "${BRANCH}" --depth=1 || true
            git push origin "${BRANCH}"
          fi

      - name: Create separate PR for workflow proposals
        if: steps.split_workflow_changes.outputs.has_wf_changes == 'true'
        env:
          PROPOSAL_PR_BODY: |
            This PR contains **proposals** for workflow file changes detected while working on the linked issue.
            Because the automation token lacks `workflows` permission, the actual `.github/workflows/*` files were **not** changed.
            **How to apply**
            - Review `proposals/workflows/README.md` and the included patch/`.proposed` files.
            - Apply locally and commit from an account with `workflows` permission.
        run: |
          set -euo pipefail
          TS="$(date '+%Y%m%d-%H%M%S')"
          WF_BRANCH="proposal/workflows/issue-${ISSUE_NUMBER}-${TS}"
          git fetch origin "$DEFAULT_BRANCH" --depth=1
          git switch -c "$WF_BRANCH" "origin/$DEFAULT_BRANCH"
          git fetch origin "${BRANCH}" --depth=1
          git checkout "origin/${BRANCH}" -- proposals/workflows || true
          if [[ -d proposals/workflows ]]; then
            git add proposals/workflows
            git commit -m "Propose workflow changes for issue #${ISSUE_NUMBER} (manual apply required)"
            git push --set-upstream origin "$WF_BRANCH"
            gh pr create \
              --base "$DEFAULT_BRANCH" \
              --head "$WF_BRANCH" \
              --title "Proposal: workflow updates for issue #${ISSUE_NUMBER} (manual apply required)" \
              --body "$PROPOSAL_PR_BODY" \
              --repo "$REPO"
          else
            echo "::notice::No proposal files found; skipping proposal PR."
          fi

  # ------------------------------------------------------------
  # Job B – PR events → run Codex; split workflow changes; push or OpenAI.md
  # ------------------------------------------------------------
  assign_and_codex:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
      OWNER: ${{ github.repository_owner }}
      REPO_NAME: ${{ github.event.repository.name }}
      TZ: Europe/Stockholm
    steps:
      - name: Checkout PR head (write access)
        uses: actions/checkout@v5
        with:
          ref: refs/pull/${{ github.event.pull_request.number }}/head
          persist-credentials: true
          fetch-depth: 0

      - name: Prefetch base & head refs
        run: |
          git fetch --no-tags origin \
            ${{ github.event.pull_request.base.ref }} \
            +refs/pull/${{ github.event.pull_request.number }}/head

      - name: Detect linked issues
        id: linked
        run: |
          set -euo pipefail
          q='query($owner:String!,$repo:String!,$number:Int!){
            repository(owner:$owner,name:$repo){
              pullRequest(number:$number){
                closingIssuesReferences(first:10){nodes{number}}
              }
            }
          }'
          data="$(gh api graphql -f query="$q" -F owner="$OWNER" -F repo="$REPO_NAME" -F number="${{ github.event.pull_request.number }}")"
          nums="$(echo "$data" | jq -r '.data.repository.pullRequest.closingIssuesReferences.nodes|map(.number)|join(",")')"
          if [[ -n "$nums" ]]; then
            echo "has=true" >> "$GITHUB_OUTPUT"
            echo "numbers=$nums" >> "$GITHUB_OUTPUT"
          else
            echo "has=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Skip if PR has no linked issues
        if: steps.linked.outputs.has != 'true'
        run: echo "No linked issues → skipping Codex run."

      - name: Build Codex prompt (env block)
        if: steps.linked.outputs.has == 'true'
        id: build_prompt_b
        env:
          ISSUE_NUMBERS: ${{ steps.linked.outputs.numbers }}
          PR_NUM: ${{ github.event.pull_request.number }}
          BASE_SHA: ${{ github.event.pull_request.base.sha }}
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
          CODEX_PROMPT: |
            You are Codex working directly on the PR head for PR #${PR_NUM}.
            The PR is linked to issue(s) #${ISSUE_NUMBERS}.
            Goal:
            - Make minimal, targeted code edits in the workspace to resolve the linked issue(s).
            - Update tests and docs when relevant.
            - Print a concise summary of what changed.
            Context:
            - Base SHA: ${BASE_SHA}
            - Head SHA: ${HEAD_SHA}
        run: echo "OK"

      - name: Run Codex task on PR head (write enabled)
        if: steps.linked.outputs.has == 'true'
        id: run_codex
        uses: openai/codex-action@v1
        timeout-minutes: 20
        continue-on-error: true
        with:
          openai-api-key: ${{ secrets.OPENAI_API_KEY }}
          prompt: ${{ env.CODEX_PROMPT }}

      - name: Prepare commit set; split workflow changes to proposal
        id: split_workflow_changes_b
        env:
          PROPOSAL_README: |
            # Workflow change proposal (manual apply required)
            Token lacks `workflows` permission. Use the patch and `.proposed` files to apply changes under `.github/workflows/`.
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          CHANGED="$(git status --porcelain | awk '{print $2}')"
          echo "changed=$CHANGED" >> "$GITHUB_OUTPUT"
          mapfile -t WF_FILES < <(printf '%s\n' $CHANGED | grep -E '^\.github/workflows/' || true)
          if (( ${#WF_FILES[@]} )); then
            echo "has_wf_changes=true" >> "$GITHUB_OUTPUT"
            TS="$(date '+%Y%m%d-%H%M%S')"
            mkdir -p proposals/workflows
            git diff -- ${WF_FILES[@]} > "proposals/workflows/workflows-${TS}.patch" || true
            for f in "${WF_FILES[@]}"; do
              cp -f "$f" "proposals/workflows/$(basename "$f").proposed" || true
            done
            printf "%s\n" "$PROPOSAL_README" > proposals/workflows/README.md
            git checkout -- ${WF_FILES[@]} || true
            git add proposals/workflows || true
          else
            echo "has_wf_changes=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Commit & push PR head (retry) or OpenAI.md fallback
        if: steps.linked.outputs.has == 'true'
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          HEAD_REF="${{ github.head_ref }}"
          if [[ -z "$HEAD_REF" || "$HEAD_REF" == "null" ]]; then
            HEAD_REF="$(git rev-parse --abbrev-ref HEAD)"
          fi
          if [[ -n "$(git status --porcelain)" ]]; then
            git add -A
            git commit -m "Codex auto-fix for issue(s) #${{ steps.linked.outputs.numbers }}"
          else
            TS="$(date '+%Y-%m-%d %H:%M:%S %Z')"
            {
              echo ""
              echo "- PR: #${{ github.event.pull_request.number }}"
              echo "- Linked issues: #${{ steps.linked.outputs.numbers }}"
              echo "- Timestamp: ${TS}"
              echo ""
              echo "OpenAI/Codex did not propose further changes on this PR event."
              echo ""
            } >> OpenAI.md
            git add OpenAI.md
            git commit -m "Record: No Codex changes suggested on PR #${{ github.event.pull_request.number }}"
          fi
          if ! git push origin "$HEAD_REF"; then
            echo "::warning::Push failed. Fetch + retry."
            git fetch origin "$HEAD_REF" --depth=1 || true
            git push origin "$HEAD_REF"
          fi

      - name: Create separate PR for workflow proposals
        if: steps.split_workflow_changes_b.outputs.has_wf_changes == 'true'
        env:
          REPO: ${{ github.repository }}
          DEFAULT_BRANCH: ${{ github.event.pull_request.base.ref }}
          PROPOSAL_PR_BODY: |
            This PR contains **proposals** for workflow file changes detected on this PR.
            The actual `.github/workflows/*` files were **not** changed due to missing `workflows` permission.
            **How to apply**
            - Review `proposals/workflows/README.md` and the included patch/`.proposed` files.
            - Apply locally and commit from an account with `workflows` permission.
        run: |
          set -euo pipefail
          TS="$(date '+%Y%m%d-%H%M%S')"
          WF_BRANCH="proposal/workflows/pr-${{ github.event.pull_request.number }}-${TS}"
          git fetch origin "$DEFAULT_BRANCH" --depth=1
          git switch -c "$WF_BRANCH" "origin/$DEFAULT_BRANCH"
          git fetch origin "${{ github.head_ref }}" --depth=1 || true
          git checkout "origin/${{ github.head_ref }}" -- proposals/workflows || true
          if [[ -d proposals/workflows ]]; then
            git add proposals/workflows
            git commit -m "Propose workflow changes for PR #${{ github.event.pull_request.number }} (manual apply required)"
            git push --set-upstream origin "$WF_BRANCH"
            gh pr create \
              --base "$DEFAULT_BRANCH" \
              --head "$WF_BRANCH" \
              --title "Proposal: workflow updates for PR #${{ github.event.pull_request.number }} (manual apply required)" \
              --body "$PROPOSAL_PR_BODY" \
              --repo "$REPO"
          else
            echo "::notice::No proposal files found; skipping proposal PR."
          fi