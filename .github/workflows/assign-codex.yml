name: Auto draft PR from issue + Codex task on PRs linked to issues

on:
  issues:
    types: [opened, reopened]
  pull_request:
    types: [opened, reopened, ready_for_review, synchronize]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  # ------------------------------------------------------------
  # Job A â€“ When issue opened/reopened â†’ create/reuse draft PR
  # then run Codex immediately (fallback if linking not yet visible)
  # ------------------------------------------------------------
  create_or_reuse_draft_pr:
    if: github.event_name == 'issues'
    runs-on: ubuntu-latest
    env:
      REPO: ${{ github.repository }}
      ISSUE_NUMBER: ${{ github.event.issue.number }}
      ISSUE_TITLE: ${{ github.event.issue.title }}

    steps:
      - name: Enable Debug Logging
        run: echo "ACTIONS_STEP_DEBUG=true" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Determine default branch
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          DEFAULT_BRANCH=$(gh repo view "$REPO" --json defaultBranchRef --jq .defaultBranchRef.name)
          echo "DEFAULT_BRANCH=$DEFAULT_BRANCH" >> $GITHUB_ENV
          echo "::debug::Default branch is $DEFAULT_BRANCH"

      # âœ… Robust branch create/reuse
      - name: Find or create branch with empty commit
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail

          PREFIX="refs/heads/codex/issue-${ISSUE_NUMBER}-*"
          EXISTING=$(git ls-remote --heads origin "$PREFIX" \
            | awk '{print $2}' | sed 's#refs/heads/##' | head -n1 || true)

          if [[ -n "${EXISTING:-}" ]]; then
            BRANCH="$EXISTING"
            echo "::debug::Reusing existing remote branch: $BRANCH"
            git fetch origin "$BRANCH" --depth=1
            if ! git rev-parse --verify "$BRANCH" >/dev/null 2>&1; then
              git switch -c "$BRANCH" --track "origin/$BRANCH"
            else
              git switch "$BRANCH"
              git reset --hard "origin/$BRANCH"
            fi
          else
            SLUG=$(printf '%s' "$ISSUE_TITLE" \
              | tr '[:upper:]' '[:lower:]' \
              | tr -cs 'a-z0-9' '-' \
              | sed 's/^-//;s/-$//' \
              | cut -c1-40)
            BRANCH="codex/issue-${ISSUE_NUMBER}${SLUG:+-$SLUG}"
            echo "::debug::Creating new branch: $BRANCH"

            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

            git fetch origin "$DEFAULT_BRANCH" --depth=1
            git switch -c "$BRANCH" "origin/$DEFAULT_BRANCH"

            git commit --allow-empty -m "Init draft for issue #${ISSUE_NUMBER}"
            git push --set-upstream origin "$BRANCH"
          fi

          echo "BRANCH=$BRANCH" >> $GITHUB_ENV

      - name: Ensure draft PR exists (create if missing)
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          set +e
          PR_JSON=$(gh pr view "$BRANCH" --json number,url --repo "$REPO" 2>/dev/null)
          RC=$?
          set -e

          if [ $RC -eq 0 ] && [ -n "$PR_JSON" ]; then
            PR_NUMBER=$(printf '%s' "$PR_JSON" | jq -r .number)
            PR_URL=$(printf '%s' "$PR_JSON" | jq -r .url)
            echo "::debug::Existing PR found: #$PR_NUMBER"
          else
            PR_URL=$(gh pr create \
              --base "$DEFAULT_BRANCH" \
              --head "$BRANCH" \
              --title "Draft: Issue #$ISSUE_NUMBER â€“ $ISSUE_TITLE" \
              --body "This draft PR was auto-created for **Issue #$ISSUE_NUMBER**.\n\nCloses #$ISSUE_NUMBER" \
              --draft \
              --repo "$REPO")
            PR_NUMBER=$(gh pr view "$BRANCH" --json number --jq .number --repo "$REPO")
            echo "::debug::Created new PR: #$PR_NUMBER"
          fi

          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          echo "PR_URL=$PR_URL" >> $GITHUB_ENV

      # ---------------- Run Codex immediately ----------------
      - name: Check out PR (merge ref) for Codex context
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ env.PR_NUMBER }}/merge

      - name: Get PR SHAs and metadata
        id: prsha
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          pr=$(gh pr view "$PR_NUMBER" --json headRefOid,baseRefOid,title,body,number)
          echo "base_sha=$(echo "$pr" | jq -r .baseRefOid)" >> "$GITHUB_OUTPUT"
          echo "head_sha=$(echo "$pr" | jq -r .headRefOid)" >> "$GITHUB_OUTPUT"
          echo "pr_title=$(echo "$pr" | jq -r .title)" >> "$GITHUB_OUTPUT"
          {
            echo "pr_body<<EOF"
            echo "$(echo "$pr" | jq -r .body)"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Detect linked issues for this PR (with fallback)
        id: linked_issue_in_job_a
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          ISSUE_NUMBER: ${{ env.ISSUE_NUMBER }}
          PR_NUMBER: ${{ env.PR_NUMBER }}
        run: |
          set -euo pipefail
          q='query($owner:String!,$repo:String!,$number:Int!){
            repository(owner:$owner,name:$repo){
              pullRequest(number:$number){
                closingIssuesReferences(first: 10){ nodes { number title } }
              }
            }
          }'

          nums=""
          for i in 1 2 3; do
            data=$(gh api graphql -f query="$q" -F owner="$OWNER" -F repo="$REPO" -F number="$PR_NUMBER" || true)
            nums=$(echo "${data:-}" | jq -r '.data.repository.pullRequest.closingIssuesReferences.nodes | map(.number) | join(",")' 2>/dev/null || true)
            if [[ -n "${nums:-}" ]]; then
              echo "::debug::Found linked issues via GraphQL: $nums"
              break
            fi
            echo "::debug::No linked issues yet (attempt $i) â€“ retrying..."
            sleep 2
          done

          # Fallback to triggering issue if none found
          if [[ -z "${nums:-}" ]]; then
            nums="$ISSUE_NUMBER"
            echo "::debug::Falling back to triggering issue #$ISSUE_NUMBER"
          fi

          echo "has=true" >> "$GITHUB_OUTPUT"
          echo "numbers=$nums" >> "$GITHUB_OUTPUT"

      - name: Fetch first linked issue (for Codex prompt)
        if: steps.linked_issue_in_job_a.outputs.has == 'true'
        id: issue_a
        env:
          GH_TOKEN: ${{ github.token }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
        run: |
          set -euo pipefail
          first=$(echo "${{ steps.linked_issue_in_job_a.outputs.numbers }}" | awk -F',' '{print $1}')
          issue_json=$(gh api repos/$OWNER/$REPO/issues/$first)
          echo "num=$first" >> $GITHUB_OUTPUT
          echo "title=$(echo "$issue_json" | jq -r .title)" >> $GITHUB_OUTPUT
          {
            echo "body<<EOF"
            echo "$(echo "$issue_json" | jq -r .body)"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Run Codex task (immediate) for newly created PR
        if: steps.linked_issue_in_job_a.outputs.has == 'true'
        id: run_codex_a
        uses: openai/codex-action@v1
        with:
          openai-api-key: ${{ secrets.OPENAI_API_KEY }}
          safety-strategy: read-only
          prompt: |
            You are Codex running as an automated task for PR #${{ env.PR_NUMBER }}
            in ${{ github.repository }}. The PR is linked to issue(s) #${{ steps.linked_issue_in_job_a.outputs.numbers }}.

            Objectives:
            - Read the linked issue details and the PR diff.
            - If the PR already resolves the issue, write a concise verification note.
            - Otherwise, propose precise follow-ups (edits, tests, documentation) and include concrete unified diff hunks.

            Repository context:
            - Base SHA: ${{ steps.prsha.outputs.base_sha }}
            - Head SHA: ${{ steps.prsha.outputs.head_sha }}

            Linked issue (number, title, then body):
            #${{ steps.issue_a.outputs.num }} â€” ${{ steps.issue_a.outputs.title }}
            ---
            ${{ steps.issue_a.outputs.body }}

            Pull request title and body:
            ---
            ${{ steps.prsha.outputs.pr_title }}

            ${{ steps.prsha.outputs.pr_body }}

            Output format:
            1) One-paragraph summary.
            2) Checklist of actionable items.
            3) If proposing changes, include unified diff hunks ready to apply.

      - name: Post Codex result as PR comment (immediate run)
        if: steps.linked_issue_in_job_a.outputs.has == 'true' && steps.run_codex_a.outputs.final-message != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: Number(process.env.PR_NUMBER),
              body:
                "ðŸ¤– **Codex task result (linked to issue(s) #${{ steps.linked_issue_in_job_a.outputs.numbers }})**\n\n" +
                ${{ toJSON(steps.run_codex_a.outputs['final-message']) }}
            })

  # ------------------------------------------------------------
  # Job B â€“ On real PR events â†’ run Codex (for updates/syncs)
  # ------------------------------------------------------------
  assign_and_codex:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - name: Check out PR (merge ref)
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ github.event.pull_request.number }}/merge

      - name: Prefetch base & head refs
        run: |
          git fetch --no-tags origin \
            ${{ github.event.pull_request.base.ref }} \
            +refs/pull/${{ github.event.pull_request.number }}/head

      - name: Detect linked issues
        id: linked
        env:
          GH_TOKEN: ${{ github.token }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          q='query($owner:String!,$repo:String!,$number:Int!){
            repository(owner:$owner,name:$repo){
              pullRequest(number:$number){
                closingIssuesReferences(first: 10){ nodes { number title } }
              }
            }
          }'
          data=$(gh api graphql -f query="$q" -F owner="$OWNER" -F repo="$REPO" -F number="$PR_NUMBER")
          nums=$(echo "$data" | jq -r '.data.repository.pullRequest.closingIssuesReferences.nodes | map(.number) | join(",")')
          if [[ -n "$nums" ]]; then
            echo "has=true" >> $GITHUB_OUTPUT
            echo "numbers=$nums" >> $GITHUB_OUTPUT
          else
            echo "has=false" >> $GITHUB_OUTPUT
          fi

      - name: Skip if PR has no linked issues
        if: steps.linked.outputs.has != 'true'
        run: echo "No linked issues â†’ skipping Codex run."

      - name: Fetch first linked issue
        if: steps.linked.outputs.has == 'true'
        id: issue
        env:
          GH_TOKEN: ${{ github.token }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
        run: |
          first=$(echo "${{ steps.linked.outputs.numbers }}" | awk -F',' '{print $1}')
          issue_json=$(gh api repos/$OWNER/$REPO/issues/$first)
          echo "num=$first" >> $GITHUB_OUTPUT
          echo "title=$(echo "$issue_json" | jq -r .title)" >> $GITHUB_OUTPUT
          {
            echo "body<<EOF"
            echo "$(echo "$issue_json" | jq -r .body)"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Run Codex task for PR + linked issue
        if: steps.linked.outputs.has == 'true'
        id: run_codex
        uses: openai/codex-action@v1
        with:
          openai-api-key: ${{ secrets.OPENAI_API_KEY }}
          safety-strategy: read-only
          prompt: |
            You are Codex running as an automated task for PR #${{ github.event.pull_request.number }}
            in ${{ github.repository }}. The PR is linked to issue(s) #${{ steps.linked.outputs.numbers }}.

            Objectives:
            - Read the linked issue details and the PR diff.
            - If the PR already resolves the issue, write a concise verification note.
            - Otherwise, propose precise follow-ups (edits, tests, documentation) and include concrete unified diff hunks.

            Repository context:
            - Base SHA: ${{ github.event.pull_request.base.sha }}
            - Head SHA: ${{ github.event.pull_request.head.sha }}

            Linked issue (number, title, then body):
            #${{ steps.issue.outputs.num }} â€” ${{ steps.issue.outputs.title }}
            ---
            ${{ steps.issue.outputs.body }}

            Pull request title and body:
            ---
            ${{ github.event.pull_request.title }}

            ${{ github.event.pull_request.body }}

            Output format:
            1) One-paragraph summary.
            2) Checklist of actionable items.
            3) If proposing changes, include unified diff hunks ready to apply.

      - name: Post Codex result as PR comment
        if: steps.linked.outputs.has == 'true' && steps.run_codex.outputs.final-message != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body:
                "ðŸ¤– **Codex task result (linked to issue(s) #${{ steps.linked.outputs.numbers }})**\n\n" +
                ${{ toJSON(steps.run_codex.outputs['final-message']) }}
            })