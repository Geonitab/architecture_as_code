name: Auto draft PR from issue + Codex task on PRs linked to issues

on:
  issues:
    types: [opened, reopened]
  pull_request:
    types: [opened, reopened, ready_for_review, synchronize]
  workflow_dispatch:

# Superset of permissions needed by both jobs
permissions:
  contents: write        # create branch/commit/push (issue job) + read for PR job
  pull-requests: write   # create PR + comment
  issues: write          # comment on issues and read linked issues

jobs:
  # -------------------------------
  # Job A: From new/reopened issue ‚Üí create or reuse a draft PR
  # -------------------------------
  create_or_reuse_draft_pr:
    if: github.event_name == 'issues'
    runs-on: ubuntu-latest
    env:
      REPO: ${{ github.repository }}
      ISSUE_NUMBER: ${{ github.event.issue.number }}
      ISSUE_TITLE: ${{ github.event.issue.title }}

    steps:
      - name: Enable Debug Logging
        run: echo "ACTIONS_STEP_DEBUG=true" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Determine default branch
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          DEFAULT_BRANCH=$(gh repo view "$REPO" --json defaultBranchRef --jq .defaultBranchRef.name)
          echo "DEFAULT_BRANCH=$DEFAULT_BRANCH" >> $GITHUB_ENV
          echo "::debug::Default branch is $DEFAULT_BRANCH"

      - name: Find or create branch with empty commit
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          # Try to find an existing branch for this issue
          EXISTING=$(git ls-remote --heads "https://x-access-token:${GH_TOKEN}@github.com/${REPO}.git" \
            "refs/heads/codex/issue-${ISSUE_NUMBER}-*{,}" | awk '{print $2}' | sed 's#refs/heads/##' | head -n1)

          if [ -n "$EXISTING" ]; then
            BRANCH="$EXISTING"
            echo "::debug::Reusing existing branch: $BRANCH"
          else
            # Create a new branch slug from title
            SLUG=$(printf '%s' "$ISSUE_TITLE" | tr '[:upper:]' '[:lower:]' | tr -cs 'a-z0-9' '-' | sed 's/^-//;s/-$//' | cut -c1-40)
            BRANCH="codex/issue-${ISSUE_NUMBER}${SLUG:+-$SLUG}"
            echo "::debug::Creating new branch: $BRANCH"

            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

            git fetch origin "$DEFAULT_BRANCH" --depth=1
            git switch -c "$BRANCH" "origin/$DEFAULT_BRANCH"

            git commit --allow-empty -m "Init draft for issue #${ISSUE_NUMBER}"
            git push --set-upstream origin "$BRANCH"
          fi

          echo "BRANCH=$BRANCH" >> $GITHUB_ENV

      - name: Ensure draft PR exists (create if missing)
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          set +e
          PR_JSON=$(gh pr view "$BRANCH" --json number,url --repo "$REPO" 2>/dev/null)
          RC=$?
          set -e

          if [ $RC -eq 0 ] && [ -n "$PR_JSON" ]; then
            PR_NUMBER=$(printf '%s' "$PR_JSON" | jq -r .number)
            PR_URL=$(printf '%s' "$PR_JSON" | jq -r .url)
            echo "::debug::Existing PR found: #$PR_NUMBER"
          else
            PR_URL=$(gh pr create \
              --base "$DEFAULT_BRANCH" \
              --head "$BRANCH" \
              --title "Draft: Issue #$ISSUE_NUMBER ‚Äì $ISSUE_TITLE" \
              --body "This draft PR was auto-created for **Issue #$ISSUE_NUMBER**.\n\nCloses #$ISSUE_NUMBER" \
              --draft \
              --repo "$REPO")
            PR_NUMBER=$(gh pr view "$BRANCH" --json number --jq .number --repo "$REPO")
            echo "::debug::Created new PR: #$PR_NUMBER"
          fi

          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          echo "PR_URL=$PR_URL" >> $GITHUB_ENV

      - name: Comment on PR (ping @codex)
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          gh api repos/$REPO/issues/$PR_NUMBER/comments \
            -f body='@codex - Please address this draft PR.'
          echo "::debug::Comment added to PR #$PR_NUMBER"

      - name: Comment in the original issue (link to PR and ping @codex)
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          gh api repos/$REPO/issues/$ISSUE_NUMBER/comments \
            -f body="A draft PR has been created or reused for this issue: ${PR_URL}\n"
          echo "::debug::Comment added to Issue #$ISSUE_NUMBER"

  # -------------------------------
  # Job B: On PR events ‚Üí run Codex if PR is linked to an issue
  # -------------------------------
  assign_and_codex:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      # 1) Check out the PR‚Äôs merge ref so Codex can see the full diff
      - name: Check out PR (merge ref)
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ github.event.pull_request.number }}/merge

      - name: Prefetch base & head refs
        run: |
          git fetch --no-tags origin \
            ${{ github.event.pull_request.base.ref }} \
            +refs/pull/${{ github.event.pull_request.number }}/head

      # 2) (Keep any existing "assign" logic here if your workflow
      #     already auto-assigns reviewers or labels.)

      # 3) Detect issues linked to the PR via GraphQL (closingIssuesReferences)
      - name: Detect linked issues
        id: linked
        env:
          GH_TOKEN: ${{ github.token }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          q='query($owner:String!,$repo:String!,$number:Int!){
            repository(owner:$owner,name:$repo){
              pullRequest(number:$number){
                closingIssuesReferences(first: 10){ nodes { number title } }
              }
            }
          }'
          data=$(gh api graphql -f query="$q" -F owner="$OWNER" -F repo="$REPO" -F number="$PR_NUMBER")
          nums=$(echo "$data" | jq -r '.data.repository.pullRequest.closingIssuesReferences.nodes | map(.number) | join(",")')
          if [[ -n "$nums" ]]; then
            echo "has=true" >> $GITHUB_OUTPUT
            echo "numbers=$nums" >> $GITHUB_OUTPUT
          else
            echo "has=false" >> $GITHUB_OUTPUT
          fi

      - name: Skip if PR has no linked issues
        if: steps.linked.outputs.has != 'true'
        run: echo "No linked issues ‚Üí skipping Codex run."

      # 4) Retrieve the first linked issue for additional context in the prompt
      - name: Fetch first linked issue
        if: steps.linked.outputs.has == 'true'
        id: issue
        env:
          GH_TOKEN: ${{ github.token }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
        run: |
          first=$(echo "${{ steps.linked.outputs.numbers }}" | awk -F',' '{print $1}')
          issue_json=$(gh api repos/$OWNER/$REPO/issues/$first)
          echo "num=$first" >> $GITHUB_OUTPUT
          echo "title=$(echo "$issue_json" | jq -r .title)" >> $GITHUB_OUTPUT
          {
            echo "body<<'EOF'"
            echo "$issue_json" | jq -r .body
            echo "EOF"
          } >> $GITHUB_OUTPUT

      # 5) Run Codex as an ‚Äúautonomous task‚Äù for this PR + issue combination
      - name: Run Codex task for PR + linked issue
        if: steps.linked.outputs.has == 'true'
        id: run_codex
        uses: openai/codex-action@v1
        with:
          openai-api-key: ${{ secrets.OPENAI_API_KEY }}
          safety-strategy: read-only   # read the repo, do not write locally
          prompt: |
            You are Codex running as an automated task for PR #${{ github.event.pull_request.number }}
            in ${{ github.repository }}. The PR is linked to issue(s) #${{ steps.linked.outputs.numbers }}.

            Objectives:
            - Read the linked issue details and the PR diff.
            - If the PR already resolves the issue, write a concise verification note.
            - Otherwise, propose precise follow-ups (edits, tests, documentation) and include concrete unified diff hunks.

            Repository context:
            - Base SHA: ${{ github.event.pull_request.base.sha }}
            - Head SHA: ${{ github.event.pull_request.head.sha }}

            Linked issue (number, title, then body):
            #${{ steps.issue.outputs.num }} ‚Äî ${{ steps.issue.outputs.title }}
            ---
            ${{ steps.issue.outputs.body }}

            Pull request title and body:
            ---
            ${{ github.event.pull_request.title }}

            ${{ github.event.pull_request.body }}

            Output format:
            1) One-paragraph summary.
            2) Checklist of actionable items.
            3) If proposing changes, include unified diff hunks ready to apply.

      # 6) Post the Codex result as a comment on the PR
      - name: Post Codex result as PR comment
        if: steps.linked.outputs.has == 'true' && steps.run_codex.outputs.final-message != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body:
                "ü§ñ **Codex task result (linked to issue(s) #${{ steps.linked.outputs.numbers }})**\n\n" +
                ${{ toJSON(steps.run_codex.outputs['final-message']) }}
            })