name: Auto Codex for Issues + PRs (create PR if missing)

on:
  issues:
    types: [opened, reopened]
  pull_request:
    types: [opened, reopened, ready_for_review, synchronize]
  workflow_dispatch:
  schedule:
    - cron: '*/30 * * * *'

permissions:
  contents: write
  pull-requests: write
  issues: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.event.issue.number || github.ref }}
  cancel-in-progress: false

jobs:
  # ============================================================
  # JOB 0 – Prepare targets (ensure draft PRs, build matrix)
  # - Single issue when event == 'issues'
  # - Loop all open issues when schedule/dispatch
  # - Skips on pull_request events (handled by pr_codex)
  # Exposes: outputs.matrix (JSON array of {branch, pr_number})
  # ============================================================
  prepare_targets:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    env:
      REPO: ${{ github.repository }}
    steps:
      - name: Enable debug logging
        run: echo "ACTIONS_STEP_DEBUG=true" >> $GITHUB_ENV

      - name: Check out repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Determine default branch
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          DEFAULT_BRANCH=$(gh repo view "$REPO" --json defaultBranchRef --jq .defaultBranchRef.name)
          echo "DEFAULT_BRANCH=$DEFAULT_BRANCH" >> $GITHUB_ENV

      - name: Ensure draft PRs and collect targets
        id: ensure-and-collect
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
          REPO: ${{ env.REPO }}
          DEFAULT_BRANCH: ${{ env.DEFAULT_BRANCH }}
        run: |
          set -euo pipefail
          echo "[]" > targets.json

          create_or_reuse_for_issue () {
            local ISSUE_NUMBER="$1"
            local ISSUE_TITLE="$2"

            echo "::group::Processing issue #$ISSUE_NUMBER – $ISSUE_TITLE"

            # Find existing branch or create a new one
            PREFIX="refs/heads/codex/issue-${ISSUE_NUMBER}-*"
            EXISTING=$(git ls-remote --heads origin "$PREFIX" | awk '{print $2}' | sed 's#refs/heads/##' | head -n1 || true)

            if [[ -n "${EXISTING:-}" ]]; then
              BRANCH="$EXISTING"
              echo "::debug::Reusing existing branch: $BRANCH"
              git fetch origin "$BRANCH" --depth=1
              git switch -C "$BRANCH" "origin/$BRANCH"
            else
              SLUG=$(printf '%s' "$ISSUE_TITLE" | tr '[:upper:]' '[:lower:]' | tr -cs 'a-z0-9' '-' | sed 's/^-//;s/-$//' | cut -c1-40)
              BRANCH="codex/issue-${ISSUE_NUMBER}${SLUG:+-$SLUG}"
              git config user.name "github-actions[bot]"
              git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
              git fetch origin "$DEFAULT_BRANCH" --depth=1
              git switch -c "$BRANCH" "origin/$DEFAULT_BRANCH"
              git commit --allow-empty -m "Initial draft for issue #${ISSUE_NUMBER}"
              git push --set-upstream origin "$BRANCH"
            fi

            # Ensure a draft PR exists for the branch
            set +e
            PR_JSON=$(gh pr view "$BRANCH" --json number,url --repo "$REPO" 2>/dev/null)
            RC=$?
            set -e
            if [ $RC -eq 0 ] && [ -n "$PR_JSON" ]; then
              PR_NUMBER=$(echo "$PR_JSON" | jq -r .number)
              PR_URL=$(echo "$PR_JSON" | jq -r .url)
              echo "Existing PR found: #$PR_NUMBER ($PR_URL)"
            else
              PR_URL=$(gh pr create \
                --base "$DEFAULT_BRANCH" \
                --head "$BRANCH" \
                --title "Draft: Issue #$ISSUE_NUMBER – $ISSUE_TITLE" \
                --body "This draft pull request was automatically created for this issue.

          Closes #$ISSUE_NUMBER" \
                --draft \
                --repo "$REPO")
              PR_NUMBER=$(gh pr view "$BRANCH" --json number --jq .number --repo "$REPO")
              echo "Created new PR: #$PR_NUMBER ($PR_URL)"
            fi

            # Append to matrix targets
            jq --arg b "$BRANCH" --argjson p "$PR_NUMBER" '. + [{branch:$b, pr_number:$p}]' targets.json > tmp.json && mv tmp.json targets.json
            echo "::endgroup::"
          }

          if [ "${{ github.event_name }}" = "issues" ]; then
            create_or_reuse_for_issue "${{ github.event.issue.number }}" "${{ github.event.issue.title }}"
          else
            # Loop all open issues on schedule/dispatch
            gh issue list --repo "$REPO" --state open --json number,title \
              | jq -r '.[] | "\(.number)|\(.title)"' \
              | while IFS='|' read -r num title; do
                  create_or_reuse_for_issue "$num" "$title"
                done
          fi

          echo "Targets collected:"
          cat targets.json

      - name: Set matrix output
        id: set-matrix
        run: |
          MATRIX=$(cat targets.json)
          # When triggered by schedule/dispatch, MATRIX may have many entries; for issues, just one.
          echo "matrix=${MATRIX}" >> $GITHUB_OUTPUT

  # ============================================================
  # JOB 1 – Run Codex for each target from matrix (issues/schedule/dispatch)
  # ============================================================
  codex_on_targets:
    needs: prepare_targets
    if: needs.prepare_targets.outputs.matrix != '[]' && needs.prepare_targets.outputs.matrix != ''
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.prepare_targets.outputs.matrix) }}
    env:
      BRANCH: ${{ matrix.target.branch }}
      PR_NUMBER: ${{ matrix.target.pr_number }}
      REPO: ${{ github.repository }}
    steps:
      - name: Check out PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH }}
          persist-credentials: true

      - name: Retrieve PR metadata
        id: prsha
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          pr=$(gh pr view "$PR_NUMBER" --json headRefOid,baseRefOid,title,body)
          echo "base_sha=$(echo "$pr" | jq -r .baseRefOid)" >> "$GITHUB_OUTPUT"
          echo "head_sha=$(echo "$pr" | jq -r .headRefOid)" >> "$GITHUB_OUTPUT"
          echo "pr_title=$(echo "$pr" | jq -r .title)" >> "$GITHUB_OUTPUT"
          {
            echo "pr_body<<EOF"
            echo "$(echo "$pr" | jq -r .body)"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Detect linked issues (fallback to issue number from branch name)
        id: linked_issue
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
          OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
          BRANCH: ${{ env.BRANCH }}
          PR_NUMBER: ${{ env.PR_NUMBER }}
        run: |
          set -euo pipefail
          q='query($owner:String!,$repo:String!,$number:Int!){
            repository(owner:$owner,name:$repo){
              pullRequest(number:$number){
                closingIssuesReferences(first:10){nodes{number title}}
              }
            }
          }'
          nums=""
          for i in 1 2 3; do
            data=$(gh api graphql -f query="$q" -F owner="$OWNER" -F repo="$REPO_NAME" -F number="$PR_NUMBER" || true)
            nums=$(echo "$data" | jq -r '.data.repository.pullRequest.closingIssuesReferences.nodes|map(.number)|join(",")' 2>/dev/null || true)
            [[ -n "$nums" ]] && break || sleep 2
          done
          if [[ -z "$nums" ]]; then
            # fallback: parse first number from branch like codex/issue-123-...
            nums=$(echo "$BRANCH" | sed -n 's#.*issue-\([0-9]\+\).*#\1#p')
          fi
          echo "numbers=$nums" >> $GITHUB_OUTPUT

      - name: Run Codex on PR branch (with write permissions)
        id: run_codex_issue
        uses: openai/codex-action@v1
        timeout-minutes: 10
        continue-on-error: true
        with:
          openai-api-key: ${{ secrets.OPENAI_API_KEY }}
          prompt: |
            You are Codex working on branch "${{ env.BRANCH }}" for PR #${{ env.PR_NUMBER }}.
            The PR is linked to issue(s) #${{ steps.linked_issue.outputs.numbers }}.

            Make minimal and targeted code changes to resolve the linked issue(s).
            Update any related tests or documentation where appropriate.
            At the end, print a concise summary of what was changed.

            Context:
            - Base SHA: ${{ steps.prsha.outputs.base_sha }}
            - Head SHA: ${{ steps.prsha.outputs.head_sha }}
            - PR title: ${{ steps.prsha.outputs.pr_title }}
            - PR body:
            ${{ steps.prsha.outputs.pr_body }}

      - name: Commit and push Codex changes
        shell: bash
        run: |
          set -euo pipefail
          if [[ -n "$(git status --porcelain)" ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add -A
            git commit -m "Codex auto-fix for issue(s) #${{ steps.linked_issue.outputs.numbers }}"
            git push origin "${BRANCH}"
            echo "::notice::Committed and pushed Codex changes to ${BRANCH}"
          else
            echo "::notice::No file changes to commit."
          fi

  # ============================================================
  # JOB 2 – PR: run Codex on PR events (opened/reopened/ready/sync)
  # ============================================================
  pr_codex:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    env:
      REPO: ${{ github.repository }}
    steps:
      - name: Check out PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          persist-credentials: true

      - name: Retrieve PR metadata
        id: prsha
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          pr=$(gh pr view "${{ github.event.pull_request.number }}" --json headRefOid,baseRefOid,title,body)
          echo "base_sha=$(echo "$pr" | jq -r .baseRefOid)" >> "$GITHUB_OUTPUT"
          echo "head_sha=$(echo "$pr" | jq -r .headRefOid)" >> "$GITHUB_OUTPUT"
          echo "pr_title=$(echo "$pr" | jq -r .title)" >> "$GITHUB_OUTPUT"
          {
            echo "pr_body<<EOF"
            echo "$(echo "$pr" | jq -r .body)"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Detect linked issues
        id: linked_issue
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
          OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          set -euo pipefail
          q='query($owner:String!,$repo:String!,$number:Int!){
            repository(owner:$owner,name:$repo){
              pullRequest(number:$number){
                closingIssuesReferences(first:10){nodes{number title}}
              }
            }
          }'
          data=$(gh api graphql -f query="$q" -F owner="$OWNER" -F repo="$REPO_NAME" -F number="${{ github.event.pull_request.number }}")
          nums=$(echo "$data" | jq -r '.data.repository.pullRequest.closingIssuesReferences.nodes|map(.number)|join(",")')
          echo "numbers=$nums" >> $GITHUB_OUTPUT

      - name: Run Codex on PR branch (with write permissions)
        id: run_codex_pr
        uses: openai/codex-action@v1
        timeout-minutes: 10
        continue-on-error: true
        with:
          openai-api-key: ${{ secrets.OPENAI_API_KEY }}
          prompt: |
            You are Codex working on branch "${{ github.head_ref }}" for PR #${{ github.event.pull_request.number }}.
            The PR is linked to issue(s) #${{ steps.linked_issue.outputs.numbers }}.

            Make minimal and targeted code changes to improve or complete the PR and address the linked issues.
            Update any related tests or documentation where appropriate.
            At the end, print a concise summary of what was changed.

            Context:
            - Base SHA: ${{ steps.prsha.outputs.base_sha }}
            - Head SHA: ${{ steps.prsha.outputs.head_sha }}
            - PR title: ${{ steps.prsha.outputs.pr_title }}
            - PR body:
            ${{ steps.prsha.outputs.pr_body }}

      - name: Commit and push Codex changes
        shell: bash
        run: |
          set -euo pipefail
          if [[ -n "$(git status --porcelain)" ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add -A
            git commit -m "Codex auto-improvements for PR #${{ github.event.pull_request.number }}"
            git push
            echo "::notice::Committed and pushed Codex changes to ${{ github.head_ref }}"
          else
            echo "::notice::No file changes to commit."
          fi