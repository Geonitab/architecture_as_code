name: Developer Agent

on:
  workflow_dispatch:
    inputs:
      objective:
        description: "Which development task should be completed?"
        required: true
      implementation_scope:
        description: "Code areas, components, or stories in scope"
        required: false
        default: ""
      technical_risks:
        description: "Known technical risks, blockers, or dependencies"
        required: false
        default: ""
  workflow_call:
    inputs:
      objective:
        required: true
        type: string
      implementation_scope:
        required: false
        type: string
        default: ""
      technical_risks:
        required: false
        type: string
        default: ""
    outputs:
      plan:
        description: "Developer plan"
        value: ${{ jobs.plan.outputs.plan }}

jobs:
  plan:
    name: Compile development plan
    runs-on: ubuntu-latest
    outputs:
      plan: ${{ steps.compose.outputs.plan }}
    steps:
      - name: Compose plan
        id: compose
        env:
          OBJECTIVE: ${{ inputs.objective }}
          IMPLEMENTATION_SCOPE: ${{ inputs.implementation_scope }}
          TECHNICAL_RISKS: ${{ inputs.technical_risks }}
        run: |
          set -euo pipefail
          objective="${OBJECTIVE:-No specific objective provided.}"
          scope_value="${IMPLEMENTATION_SCOPE:-}"
          if [ -z "$scope_value" ]; then
            scope_value="No defined implementation scope provided."
          fi
          risk_value="${TECHNICAL_RISKS:-}"
          if [ -z "$risk_value" ]; then
            risk_value="No known technical risks provided."
          fi

          export AGENT_OBJECTIVE="$objective"
          export AGENT_SCOPE="$scope_value"
          export AGENT_RISKS="$risk_value"

          summary=$(
            cat <<PLAN
# Developer plan

## Objectives
$AGENT_OBJECTIVE

## Implementation scope
$AGENT_SCOPE

## Technical risks and dependencies
$AGENT_RISKS

## Primary responsibilities from 28_ai_agent_team.md
- Implement functionality according to architectural guidelines and design.
- Write consistent code standards and automated tests.
- Split work into reviewable pull requests and collaborate with Quality Control.
- Escalate technical blockers or risks to the Project Manager.

## Recommended workflow
1. Sync with the Architect and Designer to ensure alignment on the solution.
2. Create a development plan with clear sub-tasks and a test strategy.
3. Implement and write tests iteratively, following code standards and checklists.
4. Perform self-reviews and coordinate code review and QA.
5. Prepare demos and document key technical decisions.

## Deliverables
- Code changes with associated tests.
- Updated technical documentation or ADRs as needed.
- Summary of risks, remaining work, and recommended next steps.

## Checkpoints
- Ensure coverage of acceptance criteria and non-functional requirements.
- Communicate dependencies to the Requirements Analyst and Project Manager.
- Sync with Quality Control on test data and execution instructions.
PLAN
          )

          printf '%s\n' "$summary"
          printf '%s\n' "$summary" >> "$GITHUB_STEP_SUMMARY"
          {
            echo "plan<<EOF"
            printf '%s\n' "$summary"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
