name: Build Book

"on":
  push:
    branches: [main]
    paths:
      - 'docs/**/*.md'
      - 'docs/images/**/*.mmd'
      - '.github/workflows/build-book.yml'
      - 'generate_book.py'
  pull_request:
    branches: [main]
    paths:
      - 'docs/**/*.md'
      - 'docs/images/**/*.mmd'
      - '.github/workflows/build-book.yml'
      - 'generate_book.py'
  workflow_dispatch: {}

env:
  PANDOC_VERSION: "3.1.9"
  ARTIFACT_RETENTION_DAYS: 30

jobs:
  build-book:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: üì¶ Cache dependencies and tools
        uses: actions/cache@v3
        with:
          path: |
            /var/cache/apt
            ~/.cache/pip
            ~/.local/share/pandoc
            ~/.npm
            ~/.cache/puppeteer
          key: ${{ runner.os }}-book-deps-${{ env.PANDOC_VERSION }}-v3
          restore-keys: |
            ${{ runner.os }}-book-deps-

      - name: üîß Install system dependencies
        run: |
          echo "=== Installing system dependencies ==="
          sudo apt-get update
          echo "Installing TeXLive and related packages..."
          sudo apt-get install -y \
            texlive-xetex \
            texlive-fonts-recommended \
            texlive-plain-generic \
            texlive-latex-extra \
            texlive-luatex \
            texlive-fonts-extra \
            librsvg2-bin \
            fonts-liberation \
            fonts-dejavu \
            fonts-lmodern \
            lmodern
          echo "‚úÖ System dependencies installed"

      - name: üìö Install Pandoc
        run: |
          echo "=== Installing Pandoc $PANDOC_VERSION ==="
          wget -q https://github.com/jgm/pandoc/releases/download/$PANDOC_VERSION/pandoc-$PANDOC_VERSION-1-amd64.deb
          sudo dpkg -i pandoc-$PANDOC_VERSION-1-amd64.deb
          pandoc --version
          echo "‚úÖ Pandoc installed"

      - name: üé® Install Mermaid CLI and Chrome
        run: |
          echo "=== Installing Mermaid CLI and Chrome ==="
          
          # Function to verify Chrome installation
          verify_chrome() {
            if command -v google-chrome >/dev/null 2>&1; then
              CHROME_VERSION=$(google-chrome --version 2>/dev/null)
              echo "‚úÖ Chrome installed: $CHROME_VERSION"
              return 0
            else
              echo "‚ùå Chrome not found"
              return 1
            fi
          }
          
          # Function to verify Mermaid CLI installation
          verify_mermaid() {
            if command -v mmdc >/dev/null 2>&1; then
              MERMAID_VERSION=$(mmdc --version 2>/dev/null)
              echo "‚úÖ Mermaid CLI installed: $MERMAID_VERSION"
              return 0
            else
              echo "‚ùå Mermaid CLI not found"
              return 1
            fi
          }
          
          # Install Chrome with error handling
          echo "üîÑ Installing Google Chrome..."
          if ! verify_chrome; then
            echo "üì• Adding Google Chrome repository..."
            # Use more robust key installation
            curl -fsSL https://dl.google.com/linux/linux_signing_key.pub | gpg --dearmor -o /tmp/google-chrome.gpg
            sudo install -o root -g root -m 644 /tmp/google-chrome.gpg /etc/apt/trusted.gpg.d/
            echo "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/google-chrome.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google.list
            
            echo "üîÑ Updating package list..."
            sudo apt-get update
            
            echo "üì¶ Installing Chrome package..."
            sudo apt-get install -y google-chrome-stable
            
            # Verify installation
            if ! verify_chrome; then
              echo "‚ùå Chrome installation failed"
              exit 1
            fi
          fi
          
          # Install Mermaid CLI with error handling and retry logic
          echo "üîÑ Installing Mermaid CLI..."
          if ! verify_mermaid; then
            echo "üì¶ Installing Mermaid CLI via npm..."
            
            # Set npm configuration for CI environment
            npm config set fund false
            npm config set audit-level moderate
            
            # Install with retry logic
            for attempt in 1 2 3; do
              echo "üì• Installation attempt $attempt/3..."
              if PUPPETEER_SKIP_DOWNLOAD=true npm install -g @mermaid-js/mermaid-cli; then
                echo "‚úÖ Mermaid CLI npm installation completed"
                break
              else
                echo "‚ö†Ô∏è  Attempt $attempt failed, retrying..."
                sleep 5
              fi
              
              if [ $attempt -eq 3 ]; then
                echo "‚ùå Failed to install Mermaid CLI after 3 attempts"
                exit 1
              fi
            done
            
            # Verify installation
            if ! verify_mermaid; then
              echo "‚ùå Mermaid CLI installation verification failed"
              exit 1
            fi
          fi
          
          # Final verification with environment setup
          echo "üîç Final verification..."
          verify_chrome
          verify_mermaid
          
          # Set up Puppeteer environment for Mermaid
          export PUPPETEER_EXECUTABLE_PATH=$(which google-chrome)
          echo "üéØ Chrome executable for Puppeteer: $PUPPETEER_EXECUTABLE_PATH"
          
          # Test Mermaid CLI with Chrome
          echo "üß™ Testing Mermaid CLI with Chrome..."
          echo "graph TD; A-->B" | mmdc -i /dev/stdin -o /tmp/test-diagram.png --width 400 --height 300 --theme default --background transparent
          
          if [ -f /tmp/test-diagram.png ]; then
            echo "‚úÖ Mermaid CLI test successful"
            ls -la /tmp/test-diagram.png
          else
            echo "‚ö†Ô∏è  Mermaid CLI test failed, but installation appears successful"
          fi
          
          echo "‚úÖ Mermaid CLI and Chrome installation completed"

      - name: üìã Setup Pandoc template
        run: |
          echo "=== Setting up Pandoc template ==="
          mkdir -p ~/.local/share/pandoc/templates
          
          # Function to verify template installation
          verify_template() {
            if [ -f ~/.local/share/pandoc/templates/eisvogel.latex ] && [ -s ~/.local/share/pandoc/templates/eisvogel.latex ]; then
              echo "‚úÖ Eisvogel template successfully installed ($(wc -l < ~/.local/share/pandoc/templates/eisvogel.latex) lines)"
              return 0
            else
              echo "‚ùå Template installation failed or file is empty"
              return 1
            fi
          }
          
          # Method 1: Download from latest release (recommended)
          echo "üîÑ Attempting to download from latest release..."
          LATEST_VERSION=$(curl -s https://api.github.com/repos/Wandmalfarbe/pandoc-latex-template/releases/latest | grep '"tag_name"' | cut -d'"' -f4)
          echo "üì¶ Latest version: $LATEST_VERSION"
          
          if [ -n "$LATEST_VERSION" ]; then
            echo "üì• Downloading Eisvogel template archive..."
            curl -L "https://github.com/Wandmalfarbe/pandoc-latex-template/releases/download/$LATEST_VERSION/Eisvogel.tar.gz" \
              -o /tmp/eisvogel.tar.gz 2>/dev/null
            
            if [ $? -eq 0 ] && [ -f /tmp/eisvogel.tar.gz ]; then
              echo "üìÇ Extracting template..."
              cd /tmp
              tar -xzf eisvogel.tar.gz 2>/dev/null
              
              # Find the template file
              TEMPLATE_FILE=$(find /tmp -name "eisvogel.latex" | head -1)
              if [ -n "$TEMPLATE_FILE" ] && [ -f "$TEMPLATE_FILE" ]; then
                cp "$TEMPLATE_FILE" ~/.local/share/pandoc/templates/
                echo "‚úÖ Template copied from release archive"
              fi
            fi
          fi
          
          # Verify method 1 worked
          if verify_template; then
            echo "‚úÖ Template installation successful via release download"
            exit 0
          fi
          
          # Method 2: Try alternative download URLs
          echo "üîÑ Trying alternative download methods..."
          ALTERNATIVE_URLS=(
            "https://raw.githubusercontent.com/Wandmalfarbe/pandoc-latex-template/master/eisvogel.latex"
            "https://raw.githubusercontent.com/Wandmalfarbe/pandoc-latex-template/main/eisvogel.latex"
          )
          
          for url in "${ALTERNATIVE_URLS[@]}"; do
            echo "üì• Trying: $url"
            if curl -L "$url" -o ~/.local/share/pandoc/templates/eisvogel.latex 2>/dev/null; then
              if verify_template; then
                echo "‚úÖ Template downloaded successfully from: $url"
                exit 0
              else
                echo "‚ö†Ô∏è  Downloaded file is invalid, trying next method..."
                rm -f ~/.local/share/pandoc/templates/eisvogel.latex
              fi
            fi
          done
          
          # Method 3: Use pandoc's built-in template as fallback
          echo "üîÑ Using pandoc's built-in template as fallback..."
          if pandoc --print-default-template=latex > ~/.local/share/pandoc/templates/eisvogel.latex; then
            if verify_template; then
              echo "‚úÖ Pandoc default template installed successfully"
              echo "‚ÑπÔ∏è  Using built-in template - formatting will be simpler but functional"
            else
              echo "‚ùå Failed to install pandoc default template"
              exit 1
            fi
          else
            echo "‚ùå Failed to generate pandoc default template"
            exit 1
          fi
          
          if verify_template; then
            echo "‚úÖ Fallback template created successfully"
            echo "‚ö†Ô∏è  Using minimal template - some formatting may be basic"
          else
            echo "‚ùå Failed to create fallback template"
            exit 1
          fi

      - name: üìù Generate book content
        run: |
          echo "=== Generating book content ==="
          python3 generate_book.py
          echo "‚úÖ Book content generated"

      - name: üñºÔ∏è Convert Mermaid diagrams to PNG
        run: |
          echo "=== Converting Mermaid diagrams ==="
          cd docs
          diagram_count=0
          success_count=0
          error_count=0
          
          # Ensure Chrome executable is available for Puppeteer
          export PUPPETEER_EXECUTABLE_PATH=$(which google-chrome)
          echo "üéØ Using Chrome executable: $PUPPETEER_EXECUTABLE_PATH"
          
          # Check if any .mmd files exist
          if ls images/*.mmd 1> /dev/null 2>&1; then
            echo "üìä Found Mermaid diagram files to convert..."
            
            for mmd_file in images/*.mmd; do
              if [ -f "$mmd_file" ]; then
                png_file="${mmd_file%.mmd}.png"
                echo "üîÑ Converting $mmd_file ‚Üí $png_file"
                
                # Try conversion with multiple fallback strategies
                conversion_success=false
                
                # Method 1: Standard conversion with optimized settings
                if ! $conversion_success; then
                  echo "   üì• Attempting standard conversion..."
                  if mmdc \
                    -i "$mmd_file" \
                    -o "$png_file" \
                    -t default \
                    -b transparent \
                    --width 1200 \
                    --height 800 \
                    --puppeteerConfig '{"args": ["--no-sandbox", "--disable-setuid-sandbox", "--disable-dev-shm-usage", "--disable-accelerated-2d-canvas", "--no-first-run", "--no-zygote", "--disable-gpu"]}' \
                    2>/dev/null; then
                    conversion_success=true
                    echo "   ‚úÖ Standard conversion successful"
                  fi
                fi
                
                # Method 2: Fallback with different theme and settings
                if ! $conversion_success; then
                  echo "   üîÑ Attempting fallback conversion with different settings..."
                  if mmdc \
                    -i "$mmd_file" \
                    -o "$png_file" \
                    -t dark \
                    -b white \
                    --width 1000 \
                    --height 600 \
                    2>/dev/null; then
                    conversion_success=true
                    echo "   ‚úÖ Fallback conversion successful"
                  fi
                fi
                
                # Method 3: Simple conversion without extra parameters
                if ! $conversion_success; then
                  echo "   üîÑ Attempting simple conversion..."
                  if mmdc -i "$mmd_file" -o "$png_file" 2>/dev/null; then
                    conversion_success=true
                    echo "   ‚úÖ Simple conversion successful"
                  fi
                fi
                
                # Verify the output file
                if $conversion_success && [ -f "$png_file" ] && [ -s "$png_file" ]; then
                  file_size=$(ls -lh "$png_file" | awk '{print $5}')
                  echo "   ‚úÖ Conversion verified: $png_file ($file_size)"
                  success_count=$((success_count + 1))
                else
                  echo "   ‚ö†Ô∏è  Warning: Failed to convert $mmd_file"
                  echo "   üìù Creating placeholder for $png_file"
                  
                  # Create a simple placeholder PNG if conversion failed
                  # This ensures the build doesn't fail due to missing images
                  convert -size 800x600 xc:lightgray \
                    -pointsize 20 \
                    -fill black \
                    -gravity center \
                    -annotate +0+0 "Diagram placeholder\n$(basename "$mmd_file")" \
                    "$png_file" 2>/dev/null || echo "   ‚ö†Ô∏è  Could not create placeholder"
                  
                  error_count=$((error_count + 1))
                fi
                
                diagram_count=$((diagram_count + 1))
              fi
            done
            
            echo "üìä Diagram conversion summary:"
            echo "   üìÅ Total diagrams found: $diagram_count"
            echo "   ‚úÖ Successfully converted: $success_count"
            echo "   ‚ö†Ô∏è  Failed conversions: $error_count"
            
            if [ $success_count -gt 0 ]; then
              echo "‚úÖ At least some diagrams converted successfully"
            elif [ $error_count -gt 0 ]; then
              echo "‚ö†Ô∏è  Some diagrams failed to convert, but placeholders were created"
              echo "üìñ PDF generation will continue with available images"
            fi
          else
            echo "‚ÑπÔ∏è  No Mermaid diagrams found to convert"
          fi
          
          # List all generated PNG files
          if ls images/*.png 1> /dev/null 2>&1; then
            echo "üñºÔ∏è  Generated image files:"
            ls -la images/*.png
          fi

      - name: üìñ Build PDF book
        run: |
          echo "=== Building PDF book ==="
          cd docs
          
          # List available markdown files for debugging
          echo "Available markdown files:"
          ls -la *.md | head -10
          
          # Verify pandoc.yaml exists and is valid
          if [ ! -f "pandoc.yaml" ]; then
            echo "‚ùå Error: Pandoc configuration file missing (pandoc.yaml)"
            exit 1
          fi
          
          echo "‚úÖ Pandoc configuration found"
          echo "Pandoc configuration preview:"
          head -20 pandoc.yaml
          
          # Define chapter files (matching local build script)
          CHAPTER_FILES=(
            "01_inledning.md"
            "02_grundlaggande_principer.md"
            "03_versionhantering.md"
            "04_adr.md"
            "05_automatisering_devops_cicd.md"
            "06_molnarkitektur.md"
            "07_containerisering.md"
            "08_microservices.md"
            "09_sakerhet.md"
            "10_policy_sakerhet.md"
            "11_compliance.md"
            "12_teststrategier.md"
            "13_praktisk_implementation.md"
            "14_kostnadsoptimering.md"
            "15_migration.md"
            "16_organisatorisk_forandring.md"
            "17_team_struktur.md"
            "18_digitalisering.md"
            "19_lovable_mockups.md"
            "20_framtida_trender.md"
            "21_best_practices.md"
            "22_slutsats.md"
            "23_ordlista.md"
            "24_om_forfattarna.md"
            "25_framtida_utveckling.md"
            "26_appendix_kodexempel.md"
            "27_teknisk_uppbyggnad.md"
          )
          
          # Check if required files exist
          missing_files=""
          for file in "${CHAPTER_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              missing_files="$missing_files $file"
            fi
          done
          
          if [ -n "$missing_files" ]; then
            echo "‚ùå Error: Missing required files:$missing_files"
            echo "Available files:"
            ls *.md
            exit 1
          fi
          
          echo "‚úÖ All required chapter files found"
          
          # Verify pandoc template is available
          if [ ! -f ~/.local/share/pandoc/templates/eisvogel.latex ]; then
            echo "‚ùå Error: Eisvogel template not found"
            exit 1
          fi
          
          # Build PDF with Pandoc using defaults configuration
          echo "Generating PDF with Pandoc configuration..."
          
          # Function to attempt PDF generation
          attempt_pdf_generation() {
            local template_info="$1"
            echo "üîÑ Attempting PDF generation $template_info..."
            
            if pandoc --defaults=pandoc.yaml "${CHAPTER_FILES[@]}" -o arkitektur_som_kod.pdf \
              --verbose 2>&1 | head -50; then
              if [ -f "arkitektur_som_kod.pdf" ] && [ -s "arkitektur_som_kod.pdf" ]; then
                return 0
              fi
            fi
            return 1
          }
          
          # First attempt with current template
          if attempt_pdf_generation "(with downloaded template)"; then
            echo "‚úÖ PDF generation successful with downloaded template"
          else
            echo "‚ö†Ô∏è  PDF generation failed with downloaded template, trying fallback..."
            echo "üîÑ Switching to pandoc default template..."
            
            # Generate fallback template
            if pandoc --print-default-template=latex > ~/.local/share/pandoc/templates/eisvogel.latex; then
              echo "‚úÖ Fallback template generated"
              
              # Attempt PDF generation with fallback template
              if attempt_pdf_generation "(with fallback template)"; then
                echo "‚úÖ PDF generation successful with fallback template"
                echo "‚ÑπÔ∏è  Note: Using simplified formatting due to template fallback"
              else
                echo "‚ùå PDF generation failed even with fallback template"
                echo "üîç Checking for LaTeX errors..."
                pandoc --defaults=pandoc.yaml "${CHAPTER_FILES[@]}" -o arkitektur_som_kod.pdf --verbose || true
                echo "Available files in directory:"
                ls -la
                exit 1
              fi
            else
              echo "‚ùå Failed to generate fallback template"
              exit 1
            fi
          fi
          
          # Verify PDF was created successfully
          if [ -f "arkitektur_som_kod.pdf" ]; then
            file_size=$(ls -lh arkitektur_som_kod.pdf | awk '{print $5}')
            echo "‚úÖ PDF generated successfully (Size: $file_size)"
            echo "PDF details:"
            file arkitektur_som_kod.pdf || echo "File command not available"
            ls -la arkitektur_som_kod.pdf
          else
            echo "‚ùå Failed to generate PDF"
            echo "Available files in directory:"
            ls -la
            exit 1
          fi

      - name: üìä Book build summary
        run: |
          echo "=== Build Summary ==="
          echo "Markdown files: $(ls docs/*.md 2>/dev/null | wc -l || echo 0)"
          echo "Mermaid diagrams: $(ls docs/images/*.mmd 2>/dev/null | wc -l || echo 0)"
          echo "Generated PNGs: $(ls docs/images/*.png 2>/dev/null | wc -l || echo 0)"
          if [ -f "docs/arkitektur_som_kod.pdf" ]; then
            echo "PDF size: $(ls -lh docs/arkitektur_som_kod.pdf | awk '{print $5}')"
          else
            echo "‚ö†Ô∏è No PDF found"
          fi
          echo "Build completed at: $(date)"

      - name: üì§ Upload PDF artifact
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: arkitektur-som-kod-pdf
          path: docs/arkitektur_som_kod.pdf
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

      - name: üì§ Upload book images
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: book-diagrams
          path: docs/images/*.png
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          if-no-files-found: warn

      - name: üöÄ Create Release (on main branch)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: "Arkitektur som kod v${{ github.run_number }}"
          body: |
            üìö **Arkitektur som kod - Automatisk release**
            
            Genererad fr√•n commit: ${{ github.sha }}
            
            **Inneh√•ll:**
            - üìñ Komplett PDF-bok
            - üñºÔ∏è Mermaid-diagram som PNG-filer
            
            **Bygg-info:**
            - Byggd med Pandoc ${{ env.PANDOC_VERSION }}
            - XeLaTeX PDF-engine
            - Eisvogel LaTeX template
            
            Ladda ner PDF:en fr√•n Assets nedan ‚¨áÔ∏è
          files: |
            docs/arkitektur_som_kod.pdf
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
