name: Build Book

"on":
  push:
    branches: [main]
    paths:
      - 'docs/**/*.md'
      - 'docs/images/**/*.mmd'
      - '.github/workflows/build-book.yml'
      - 'generate_book.py'
  pull_request:
    branches: [main]
    paths:
      - 'docs/**/*.md'
      - 'docs/images/**/*.mmd'
      - '.github/workflows/build-book.yml'
      - 'generate_book.py'
  workflow_dispatch: {}

env:
  PANDOC_VERSION: "3.1.9"
  ARTIFACT_RETENTION_DAYS: 30

jobs:
  build-book:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: üì¶ Cache package installations
        uses: actions/cache@v3
        with:
          path: |
            /var/cache/apt
            ~/.cache/pip
            ~/.local/share/pandoc
          key: ${{ runner.os }}-book-deps-${{ env.PANDOC_VERSION }}-v2
          restore-keys: |
            ${{ runner.os }}-book-deps-

      - name: üîß Install system dependencies
        run: |
          echo "=== Installing system dependencies ==="
          sudo apt-get update
          echo "Installing TeXLive and related packages..."
          sudo apt-get install -y \
            texlive-xetex \
            texlive-fonts-recommended \
            texlive-plain-generic \
            texlive-latex-extra \
            texlive-luatex \
            librsvg2-bin \
            fonts-liberation \
            fonts-dejavu
          echo "‚úÖ System dependencies installed"

      - name: üìö Install Pandoc
        run: |
          echo "=== Installing Pandoc $PANDOC_VERSION ==="
          wget -q https://github.com/jgm/pandoc/releases/download/$PANDOC_VERSION/pandoc-$PANDOC_VERSION-1-amd64.deb
          sudo dpkg -i pandoc-$PANDOC_VERSION-1-amd64.deb
          pandoc --version
          echo "‚úÖ Pandoc installed"

      - name: üé® Install Mermaid CLI
        run: |
          echo "=== Installing Mermaid CLI ==="
          npm install -g @mermaid-js/mermaid-cli
          
          # Install Chrome for Puppeteer
          sudo apt-get install -y google-chrome-stable
          
          # Verify installation
          mmdc --version
          echo "‚úÖ Mermaid CLI installed"

      - name: üìã Setup Pandoc template
        run: |
          echo "=== Setting up Pandoc template ==="
          mkdir -p ~/.local/share/pandoc/templates
          pandoc --print-default-template=latex > ~/.local/share/pandoc/templates/eisvogel.latex
          echo "‚úÖ Eisvogel template installed"

      - name: üìù Generate book content
        run: |
          echo "=== Generating book content ==="
          python3 generate_book.py
          echo "‚úÖ Book content generated"

      - name: üñºÔ∏è Convert Mermaid diagrams to PNG
        run: |
          echo "=== Converting Mermaid diagrams ==="
          cd docs
          diagram_count=0
          
          # Check if any .mmd files exist
          if ls images/*.mmd 1> /dev/null 2>&1; then
            for mmd_file in images/*.mmd; do
              if [ -f "$mmd_file" ]; then
                png_file="${mmd_file%.mmd}.png"
                echo "Converting $mmd_file ‚Üí $png_file"
                
                # Set Chrome executable for Puppeteer
                export PUPPETEER_EXECUTABLE_PATH=$(which google-chrome)
                
                mmdc \
                  -i "$mmd_file" \
                  -o "$png_file" \
                  -t dark \
                  -b transparent \
                  --width 1200 \
                  --height 800 \
                  || echo "‚ö†Ô∏è Warning: Failed to convert $mmd_file"
                
                diagram_count=$((diagram_count + 1))
              fi
            done
            echo "‚úÖ Processed $diagram_count Mermaid diagrams"
          else
            echo "‚ÑπÔ∏è No Mermaid diagrams found to convert"
          fi

      - name: üìñ Build PDF book
        run: |
          echo "=== Building PDF book ==="
          cd docs
          
          # List available markdown files for debugging
          echo "Available markdown files:"
          ls -la *.md | head -10
          
          # Check if pandoc.yaml config exists
          if [ ! -f "pandoc.yaml" ]; then
            echo "‚ùå Error: Pandoc configuration file missing (pandoc.yaml)"
            exit 1
          fi
          
          # Define chapter files (matching local build script)
          CHAPTER_FILES=(
            "01_inledning.md"
            "02_grundlaggande_principer.md"
            "03_versionhantering.md"
            "04_adr.md"
            "05_automatisering_devops_cicd.md"
            "06_molnarkitektur.md"
            "07_containerisering.md"
            "08_microservices.md"
            "09_sakerhet.md"
            "10_policy_sakerhet.md"
            "11_compliance.md"
            "12_teststrategier.md"
            "13_praktisk_implementation.md"
            "14_kostnadsoptimering.md"
            "15_migration.md"
            "16_organisatorisk_forandring.md"
            "17_team_struktur.md"
            "18_digitalisering.md"
            "19_lovable_mockups.md"
            "20_framtida_trender.md"
            "21_best_practices.md"
            "22_slutsats.md"
            "23_ordlista.md"
            "24_om_forfattarna.md"
            "25_framtida_utveckling.md"
            "26_appendix_kodexempel.md"
            "27_teknisk_uppbyggnad.md"
          )
          
          # Check if required files exist
          missing_files=""
          for file in "${CHAPTER_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              missing_files="$missing_files $file"
            fi
          done
          
          if [ -n "$missing_files" ]; then
            echo "‚ùå Error: Missing required files:$missing_files"
            echo "Available files:"
            ls *.md
            exit 1
          fi
          
          echo "‚úÖ All required chapter files found"
          
          # Build PDF with Pandoc using defaults configuration (matching local build script)
          echo "Generating PDF with Pandoc configuration..."
          pandoc --defaults=pandoc.yaml "${CHAPTER_FILES[@]}" -o arkitektur_som_kod.pdf
          
          # Verify PDF was created
          if [ -f "arkitektur_som_kod.pdf" ]; then
            file_size=$(ls -lh arkitektur_som_kod.pdf | awk '{print $5}')
            echo "‚úÖ PDF generated successfully (Size: $file_size)"
            echo "PDF details:"
            file arkitektur_som_kod.pdf
          else
            echo "‚ùå Failed to generate PDF"
            exit 1
          fi

      - name: üìä Book build summary
        run: |
          echo "=== Build Summary ==="
          echo "Markdown files: $(ls docs/*.md | wc -l)"
          echo "Mermaid diagrams: $(ls docs/images/*.mmd | wc -l)"
          echo "Generated PNGs: $(ls docs/images/*.png | wc -l)"
          echo "PDF size: $(ls -lh docs/arkitektur_som_kod.pdf | awk '{print $5}')"
          echo "Build completed at: $(date)"

      - name: üì§ Upload PDF artifact
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: arkitektur-som-kod-pdf
          path: docs/arkitektur_som_kod.pdf
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

      - name: üì§ Upload book images
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: book-diagrams
          path: docs/images/*.png
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          if-no-files-found: warn

      - name: üöÄ Create Release (on main branch)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: "Arkitektur som kod v${{ github.run_number }}"
          body: |
            üìö **Arkitektur som kod - Automatisk release**
            
            Genererad fr√•n commit: ${{ github.sha }}
            
            **Inneh√•ll:**
            - üìñ Komplett PDF-bok
            - üñºÔ∏è Mermaid-diagram som PNG-filer
            
            **Bygg-info:**
            - Byggd med Pandoc ${{ env.PANDOC_VERSION }}
            - XeLaTeX PDF-engine
            - Eisvogel LaTeX template
            
            Ladda ner PDF:en fr√•n Assets nedan ‚¨áÔ∏è
          files: |
            docs/arkitektur_som_kod.pdf
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
