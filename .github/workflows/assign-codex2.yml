name: Auto draft PR + Codex (always publish code in PRs; conflict-safe)

on:
  issues:
    types: [opened, reopened]
  pull_request:
    types: [opened, reopened, ready_for_review, synchronize]

permissions:
  contents: write
  pull-requests: write
  issues: write

env:
  TZ: Europe/Stockholm

jobs:
  create_draft_from_issue:
    if: github.event_name == 'issues'
    runs-on: ubuntu-latest
    env:
      REPO: ${{ github.repository }}
      ISSUE_NUMBER: ${{ github.event.issue.number }}
      ISSUE_TITLE: ${{ github.event.issue.title }}
      GH_TOKEN: ${{ github.token }}
      # Om du lägger till en PAT med "workflows" rättighet, namnge den WORKFLOWS_PAT i repo-secrets
      WORKFLOWS_PAT: ${{ secrets.WORKFLOWS_PAT }}
      # Primär källa: event-payloaden. Fallback sker i nästa steg.
      DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Determine default branch (with fallback)
        run: |
          set -euo pipefail
          if [[ -z "${DEFAULT_BRANCH:-}" || "${DEFAULT_BRANCH:-}" == "null" ]]; then
            echo "DEFAULT_BRANCH from event empty → resolving via gh"
            DB=$(gh repo view "$REPO" --json defaultBranchRef --jq .defaultBranchRef.name)
            if [[ -z "${DB:-}" || "${DB:-}" == "null" ]]; then
              echo "::error::Could not determine default branch"
              exit 1
            fi
            echo "DEFAULT_BRANCH=$DB" >> "$GITHUB_ENV"
          else
            echo "DEFAULT_BRANCH=$DEFAULT_BRANCH" >> "$GITHUB_ENV"
          fi

      - name: Debug remotes and branches
        run: |
          set -euo pipefail
          git remote -v || true
          git branch -a || true

      - name: Find or create issue branch
        run: |
          set -euo pipefail
          PREFIX="refs/heads/codex/issue-${ISSUE_NUMBER}-*"
          EXISTING=$(git ls-remote --heads origin "$PREFIX" | awk '{print $2}' | sed 's#refs/heads/##' | head -n1 || true)
          # Always ensure we have up-to-date refs before switching
          git fetch --all --prune --depth=1
          if [[ -n "$EXISTING" ]]; then
            BRANCH="$EXISTING"
            git switch -C "$BRANCH" "origin/$BRANCH"
          else
            SLUG=$(echo "$ISSUE_TITLE" | tr '[:upper:]' '[:lower:]' | tr -cs 'a-z0-9' '-' | sed 's/^-//;s/-$//' | cut -c1-40)
            BRANCH="codex/issue-${ISSUE_NUMBER}${SLUG:+-$SLUG}"
            git switch -c "$BRANCH" "origin/${DEFAULT_BRANCH}"
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git commit --allow-empty -m "Init draft for issue #${ISSUE_NUMBER}"
            git push --set-upstream origin "$BRANCH"
          fi
          echo "BRANCH=$BRANCH" >> "$GITHUB_ENV"

      - name: Ensure draft PR exists
        id: pr_meta
        run: |
          set -euo pipefail
          if gh pr view "$BRANCH" --repo "$REPO" --json number,url >/tmp/pr.json 2>/dev/null; then
            PR_NUMBER=$(jq -r .number </tmp/pr.json)
            PR_URL=$(jq -r .url </tmp/pr.json)
          else
            PR_URL=$(gh pr create \
              --base "$DEFAULT_BRANCH" \
              --head "$BRANCH" \
              --title "Draft: Issue #${ISSUE_NUMBER} – ${ISSUE_TITLE}" \
              --body "Auto-created draft PR for issue #${ISSUE_NUMBER}\n\nCloses #${ISSUE_NUMBER}" \
              --draft \
              --repo "$REPO")
            PR_NUMBER=$(gh pr view "$BRANCH" --repo "$REPO" --json number --jq .number)
          fi
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          echo "PR_URL=$PR_URL" >> $GITHUB_ENV
          echo "number=$PR_NUMBER" >> $GITHUB_OUTPUT

      - name: Get base/head SHAs
        id: prsha
        run: |
          set -euo pipefail
          pr=$(gh pr view "${{ steps.pr_meta.outputs.number }}" --repo "$REPO" --json headRefOid,baseRefOid,title,body,number)
          echo "base_sha=$(echo "$pr" | jq -r .baseRefOid)" >> "$GITHUB_OUTPUT"
          echo "head_sha=$(echo "$pr" | jq -r .headRefOid)" >> "$GITHUB_OUTPUT"
          echo "pr_title=$(echo "$pr" | jq -r .title)" >> "$GITHUB_OUTPUT"

      - name: Run Codex
        uses: openai/codex-action@v1
        continue-on-error: true
        timeout-minutes: 20
        with:
          openai-api-key: ${{ secrets.OPENAI_API_KEY }}
          prompt: |
            You are Codex working on branch "${{ env.BRANCH }}" for PR #${{ env.PR_NUMBER }}.
            Goal:
            - Make minimal edits to resolve Issue #${{ env.ISSUE_NUMBER }}.
            - If changing `.github/workflows/*.yml`, include the final YAML and write it to those files.
            - Other files may be committed normally.

      - name: Split changed files into workflow / non-workflow sets
        id: detect_changes
        run: |
          set -euo pipefail
          CHANGED=$(git status --porcelain | awk '{print $2}')
          printf '%s\n' $CHANGED | grep -E '^\.github/workflows/.*\.ya?ml$' || true > /tmp/wf.txt
          printf '%s\n' $CHANGED | grep -vE '^\.github/workflows/.*\.ya?ml$' || true > /tmp/nonwf.txt
          echo "wf_count=$(grep -c . /tmp/wf.txt || true)" >> $GITHUB_OUTPUT
          echo "nonwf_count=$(grep -c . /tmp/nonwf.txt || true)" >> $GITHUB_OUTPUT

      - name: Commit & push non-workflow changes (conflict-safe)
        if: steps.detect_changes.outputs.nonwf_count != '0'
        id: push_nonwf
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add $(cat /tmp/nonwf.txt)
          git commit -m "Codex auto-fix for issue #${ISSUE_NUMBER} (non-workflow changes)" || echo "no nonwf commit"
          if ! git push origin "${BRANCH}"; then
            echo "::warning::Non-fast-forward on ${BRANCH} → creating conflict-resolve branch."
            TS=$(date +%Y%m%d-%H%M%S)
            NEW_BRANCH="${BRANCH}-autofix-${TS}"
            git switch -c "$NEW_BRANCH"
            git push -u origin "$NEW_BRANCH"
            NEW_URL=$(gh pr create --base "$DEFAULT_BRANCH" --head "$NEW_BRANCH" \
              --title "Codex auto-fix (conflict-safe) for issue #${ISSUE_NUMBER}" \
              --body "Created due to push conflict on ${BRANCH}. Supersedes: ${PR_URL}" \
              --repo "$REPO")
            echo "created_new_pr=true" >> $GITHUB_OUTPUT
            echo "new_pr_url=$NEW_URL" >> $GITHUB_OUTPUT
          else
            echo "created_new_pr=false" >> $GITHUB_OUTPUT
          fi

      - name: Handle workflow file changes
        id: push_wf
        if: steps.detect_changes.outputs.wf_count != '0'
        env:
          ACTOR: ${{ github.actor }}
        run: |
          set -euo pipefail
          # Försök med PAT om den finns (krävs för .github/workflows/*)
          if [[ -n "${WORKFLOWS_PAT:-}" ]]; then
            echo "::notice::WORKFLOWS_PAT present – pushing workflow file changes via PAT."
            git config user.name "${ACTOR}"
            git config user.email "${ACTOR}@users.noreply.github.com"
            # Byt remote URL till PAT
            URL="https://${ACTOR}:${WORKFLOWS_PAT}@github.com/${REPO}.git"
            git remote set-url origin "$URL"
            git add $(cat /tmp/wf.txt)
            git commit -m "Codex proposal: workflow updates for issue #${ISSUE_NUMBER}" || echo "no wf commit"
            if ! git push origin "${BRANCH}"; then
              echo "::warning::Conflict when pushing workflow changes → creating separate workflow PR."
              TS=$(date +%Y%m%d-%H%M%S)
              WFB="${BRANCH}-workflow-${TS}"
              git switch -c "$WFB" || git checkout -b "$WFB"
              if ! git push -u origin "$WFB"; then
                echo "::error::Failed to push workflow branch even with PAT."
                exit 1
              fi
              WF_PR_URL=$(gh pr create --base "$DEFAULT_BRANCH" --head "$WFB" \
                --title "Workflow updates (Codex) for issue #${ISSUE_NUMBER}" \
                --body "Automated proposal of workflow changes. Review carefully.\n\nRelates to ${PR_URL}" \
                --repo "$REPO" --draft)
              echo "wf_pr_created=true" >> $GITHUB_OUTPUT
              echo "wf_pr_url=$WF_PR_URL" >> $GITHUB_OUTPUT
            else
              echo "wf_pr_created=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "::warning::No WORKFLOWS_PAT provided – cannot push workflow files. Posting diffs as PR comments instead."
            while read -r f; do
              [[ -z "$f" ]] && continue
              git diff -- "$f" > diff.patch || true
              gh pr comment "${PR_NUMBER}" --repo "$REPO" --body "$(printf "### ⚙️ Proposed workflow change\n**File:** %s\n\n\`\`\`diff\n%s\n\`\`\`\n\n> To publish as a real PR update, add a repo secret named **WORKFLOWS_PAT** with workflows permission." "$f" "$(cat diff.patch)")"
              git checkout -- "$f" || true
            done < /tmp/wf.txt
            echo "wf_pr_created=false" >> $GITHUB_OUTPUT
          fi

      - name: Mark PR ready for review (only if open + draft and we pushed something)
        if: |
          (steps.detect_changes.outputs.nonwf_count != '0' && steps.push_nonwf.outcomes != 'failure' && steps.push_nonwf.outputs.created_new_pr == 'false')
          || (steps.detect_changes.outputs.wf_count != '0' && steps.push_wf.outputs.wf_pr_created == 'false' && env.WORKFLOWS_PAT != '')
        run: |
          set -euo pipefail
          info=$(gh pr view "$PR_NUMBER" --repo "$REPO" --json state,isDraft)
          state=$(echo "$info" | jq -r .state)
          is_draft=$(echo "$info" | jq -r .isDraft)
          if [[ "$state" == "OPEN" && "$is_draft" == "true" ]]; then
            gh pr ready "$PR_NUMBER" --repo "$REPO"
            echo "::notice::Marked PR #$PR_NUMBER ready for review."
          else
            echo "::notice::PR #$PR_NUMBER is $state / draft=$is_draft – skip."
          fi

  codex_on_pr:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
      WORKFLOWS_PAT: ${{ secrets.WORKFLOWS_PAT }}

    steps:
      - name: Checkout PR head
        uses: actions/checkout@v5
        with:
          ref: refs/pull/${{ github.event.pull_request.number }}/head
          fetch-depth: 0
          persist-credentials: true

      - name: Run Codex on PR head
        uses: openai/codex-action@v1
        continue-on-error: true
        timeout-minutes: 20
        with:
          openai-api-key: ${{ secrets.OPENAI_API_KEY }}
          prompt: |
            You are Codex working on PR #${{ github.event.pull_request.number }}.
            Apply minimal edits. If you modify `.github/workflows/*.yml`, write the files normally.

      - name: Split changes
        id: detect
        run: |
          set -euo pipefail
          CHANGED=$(git status --porcelain | awk '{print $2}')
          printf '%s\n' $CHANGED | grep -E '^\.github/workflows/.*\.ya?ml$' || true > /tmp/wf.txt
          printf '%s\n' $CHANGED | grep -vE '^\.github/workflows/.*\.ya?ml$' || true > /tmp/nonwf.txt
          echo "wf_count=$(grep -c . /tmp/wf.txt || true)" >> $GITHUB_OUTPUT
          echo "nonwf_count=$(grep -c . /tmp/nonwf.txt || true)" >> $GITHUB_OUTPUT

      - name: Commit & push non-workflow (conflict-safe)
        if: steps.detect.outputs.nonwf_count != '0'
        id: push_nonwf_pr
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add $(cat /tmp/nonwf.txt)
          git commit -m "Codex auto-fix for PR #${{ github.event.pull_request.number }} (non-workflow)" || echo "no commit"
          HEAD_REF="${{ github.head_ref }}"
          [[ -z "$HEAD_REF" ]] && HEAD_REF=$(git rev-parse --abbrev-ref HEAD)
          if ! git push origin "$HEAD_REF"; then
            echo "::warning::Conflict on ${HEAD_REF} – creating conflict-safe branch."
            TS=$(date +%Y%m%d-%H%M%S)
            NEW_BRANCH="${HEAD_REF}-autofix-${TS}"
            git switch -c "$NEW_BRANCH"
            git push -u origin "$NEW_BRANCH"
            gh pr create --base "${{ github.event.pull_request.base.ref }}" --head "$NEW_BRANCH" \
              --title "Codex auto-fix (conflict-safe) for PR #${{ github.event.pull_request.number }}" \
              --body "Created due to push conflict on ${HEAD_REF}."
          fi

      - name: Push workflow file changes (needs PAT) or comment diffs
        if: steps.detect.outputs.wf_count != '0'
        run: |
          set -euo pipefail
          HEAD_REF="${{ github.head_ref }}"
          [[ -z "$HEAD_REF" ]] && HEAD_REF=$(git rev-parse --abbrev-ref HEAD)
          if [[ -n "${WORKFLOWS_PAT:-}" ]]; then
            echo "::notice::WORKFLOWS_PAT present – pushing workflow changes."
            ACTOR="${{ github.actor }}"
            git config user.name "$ACTOR"
            git config user.email "$ACTOR@users.noreply.github.com"
            URL="https://${ACTOR}:${WORKFLOWS_PAT}@github.com/${{ github.repository }}.git"
            git remote set-url origin "$URL"
            git add $(cat /tmp/wf.txt)
            git commit -m "Codex workflow updates for PR #${{ github.event.pull_request.number }}" || echo "no wf commit"
            if ! git push origin "$HEAD_REF"; then
              TS=$(date +%Y%m%d-%H%M%S)
              WFB="${HEAD_REF}-workflow-${TS}"
              git switch -c "$WFB"
              git push -u origin "$WFB"
              gh pr create --base "${{ github.event.pull_request.base.ref }}" --head "$WFB" \
                --title "Workflow updates (Codex) for PR #${{ github.event.pull_request.number }}" \
                --body "Separate PR for workflow files." --draft
            fi
          else
            echo "::warning::No WORKFLOWS_PAT – posting diffs as PR comments."
            while read -r f; do
              [[ -z "$f" ]] && continue
              git diff -- "$f" > diff.patch || true
              gh pr comment "${{ github.event.pull_request.number }}" --repo "${{ github.repository }}" --body "$(printf "### ⚙️ Proposed workflow change\n**File:** %s\n\n\`\`\`diff\n%s\n\`\`\`\n" "$f" "$(cat diff.patch)")"
              git checkout -- "$f" || true
            done < /tmp/wf.txt
          fi