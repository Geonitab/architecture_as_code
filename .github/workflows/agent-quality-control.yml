name: Quality Control Agent

on:
  workflow_dispatch:
    inputs:
      objective:
        description: "Which quality assurance task should be performed?"
        required: true
      test_scope:
        description: "Which components, features, or risk areas should be tested?"
        required: false
        default: ""
      defect_context:
        description: "Known defects, blockers, or risk levels"
        required: false
        default: ""
  workflow_call:
    inputs:
      objective:
        required: true
        type: string
      test_scope:
        required: false
        type: string
        default: ""
      defect_context:
        required: false
        type: string
        default: ""
    outputs:
      plan:
        description: "Quality Control plan"
        value: ${{ jobs.plan.outputs.plan }}

jobs:
  plan:
    name: Compile QA plan
    runs-on: ubuntu-latest
    outputs:
      plan: ${{ steps.compose.outputs.plan }}
    steps:
      - name: Compose plan
        id: compose
        env:
          OBJECTIVE: ${{ inputs.objective }}
          TEST_SCOPE: ${{ inputs.test_scope }}
          DEFECT_CONTEXT: ${{ inputs.defect_context }}
        run: |
          set -euo pipefail
          objective="${OBJECTIVE:-No specific objective provided.}"
          scope_value="${TEST_SCOPE:-}"
          if [ -z "$scope_value" ]; then
            scope_value="No test scope provided."
          fi
          defect_value="${DEFECT_CONTEXT:-}"
          if [ -z "$defect_value" ]; then
            defect_value="No known defects or risks provided."
          fi

          export AGENT_OBJECTIVE="$objective"
          export AGENT_SCOPE="$scope_value"
          export AGENT_DEFECTS="$defect_value"

          summary=$(
            cat <<PLAN
# Quality Control plan

## Objectives
$AGENT_OBJECTIVE

## Test scope
$AGENT_SCOPE

## Defect and risk context
$AGENT_DEFECTS

## Primary responsibilities from 28_ai_agent_team.md
- Maintain test suites (unit, integration, E2E).
- Perform quality reviews of code and documentation.
- Collect metrics for test results, bug management, and release quality.
- Recommend process and tooling improvements.

## Recommended workflow
1. Confirm test objectives with the Project Manager and Developer.
2. Update test data and execution plans for prioritized areas.
3. Run automated and manual tests, documenting the results.
4. Compile quality indicators (coverage, defects, blockers).
5. Deliver a report with recommendations and go/no-go actions.

## Deliverables
- Test logs and reports with status against acceptance criteria.
- List of defects, risks, and recommended actions.
- Updated quality dashboard or KPI tracking.

## Checkpoints
- Ensure traceability to requirements and design decisions.
- Sync with the Developer and Requirements Analyst on identified gaps.
- Inform the Editor about documentation needs for the release.
PLAN
          )

          printf '%s\n' "$summary"
          printf '%s\n' "$summary" >> "$GITHUB_STEP_SUMMARY"
          {
            echo "plan<<EOF"
            printf '%s\n' "$summary"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
