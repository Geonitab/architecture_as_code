name: Manual text to multiple GitHub issues (British English)

on:
  workflow_dispatch:
    inputs:
      source_text:
        description: "Paste your backlog text here (free-form)."
        required: true
        default: |
          - Bug: users cannot reset password
          - Feature: add dark mode
          - Docs: clarify SSO steps
      dry_run:
        description: "Preview only (true/false). Default: true"
        required: true
        default: "true"

permissions:
  contents: read
  issues: write

jobs:
  create_issues:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure tools are available
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Save pasted text
        env:
          SOURCE_TEXT: ${{ github.event.inputs.source_text }}
        run: |
          set -euo pipefail
          printf '%s' "$SOURCE_TEXT" > /tmp/source.txt
          echo "Preview of first lines:"
          head -n 20 /tmp/source.txt || true

      - name: Transform to British English via OpenAI
        id: openai
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -euo pipefail

          # 1) Write instruction text to file with 10-space indentation
          cat > /tmp/instruct.txt <<'EOF'
          You are an expert product editor who creates concise GitHub issues in British English.

          INPUT: One free-form text that may contain headings, bullet points, numbered lists, or paragraphs describing multiple work items.

          SPLITTING RULES:
          - Split into distinct issues whenever a new item is indicated (headings, bullets, numbered points, blank lines, or prefixes like "Bug:", "Fix:", "Feature:", "Docs:").
          - If one chunk clearly contains multiple tasks, split further.
          - Remove duplicates; keep the clearest version.

          FOR EACH ISSUE, PRODUCE:
          - title_british: concise, actionable, British spelling, no emojis.
          - body_british (Markdown):
            * Summary (1–3 sentences)
            * Acceptance criteria (bullet list if possible)
            * Context/Notes (optional)
            * Priority (if mentioned)
          - labels: at most 1–2 from {bug, enhancement, documentation, chore}.
          - assignees: include usernames if present (without the "@").

          OUTPUT:
          Return ONLY strict JSON in this schema (UTF-8, no trailing commas):
          {"issues":[{"title_british":"string","body_british":"string","labels":["string"],"assignees":["string"]}]}
          No explanations outside the JSON.
          EOF

          # 2) Convert instruction file to safe JSON string
          INSTRUCT=$(jq -Rs '.' /tmp/instruct.txt)

          # 3) Read the user-provided text
          CONTENT=$(cat /tmp/source.txt)

          # 4) Build JSON request safely with jq
          REQUEST=$(jq -n --arg instruct "$INSTRUCT" --arg content "$CONTENT" '
            {
              model: "gpt-4o-mini",
              input: [
                {role:"system", content:"Return JSON only. No explanations."},
                {role:"user", content: ($instruct | fromjson)},
                {role:"user", content: ("TEXT:\n" + $content)}
              ]
            }')

          # 5) Call the OpenAI Responses API
          RESPONSE=$(curl -sS https://api.openai.com/v1/responses \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$REQUEST")

          RAW=$(echo "$RESPONSE" | jq -r '.output_text // .output[0].content[0].text // empty')
          if [ -z "$RAW" ]; then
            echo "Model returned empty output"
            echo "$RESPONSE"
            exit 1
          fi

          echo "$RAW" | jq -e '.issues and (.issues|type=="array")' > /tmp/issues.json
          COUNT=$(jq '.issues|length' /tmp/issues.json)
          echo "count=$COUNT" >> "$GITHUB_OUTPUT"
          echo "Proposed issues: $COUNT"

      - name: Preview or create issues
        if: ${{ steps.openai.outputs.count && steps.openai.outputs.count != '0' }}
        uses: actions/github-script@v7
        env:
          DRY_RUN: ${{ github.event.inputs.dry_run }}
        with:
          script: |
            const fs = require('fs');
            const core = require('@actions/core');
            const dryRun = (process.env.DRY_RUN || 'true').toLowerCase() === 'true';
            const data = JSON.parse(fs.readFileSync('/tmp/issues.json', 'utf8'));
            const items = Array.isArray(data.issues) ? data.issues : [];

            let summary = `### Proposed Issues (${items.length})\n`;
            for (let i = 0; i < items.length; i++) {
              const it = items[i] || {};
              summary += `\n#### ${i + 1}. ${it.title_british || '(no title)'}\n`;
              summary += `${(it.body_british || '').slice(0, 500)}\n`;
              summary += `**Labels:** ${(it.labels || []).join(', ') || '(none)'}\n`;
              summary += `**Assignees:** ${(it.assignees || []).join(', ') || '(none)'}\n`;
            }

            if (dryRun) {
              core.info('Dry run: no issues will be created.');
              await core.summary.addHeading('Dry Run Summary').addRaw(summary).write();
              return;
            }

            // Fetch open issues to avoid duplicates
            const existing = await github.paginate(github.rest.issues.listForRepo, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100
            });
            const existingTitles = new Set(existing.map(i => (i.title || '').trim().toLowerCase()));

            let created = 0;
            for (const it of items) {
              const title = (it.title_british || '').trim();
              if (!title) continue;
              if (existingTitles.has(title.toLowerCase())) {
                core.info(`Skip duplicate: ${title}`);
                continue;
              }
              const body = (it.body_british || '').trim();
              const labels = Array.isArray(it.labels) ? it.labels : [];
              const assignees = Array.isArray(it.assignees) ? it.assignees : [];

              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title,
                body,
                labels,
                assignees
              });
              created++;
            }

            await core.summary
              .addHeading('Issue Creation Summary')
              .addRaw(`Created: ${created} issue(s).\n`)
              .addRaw(summary)
              .write();