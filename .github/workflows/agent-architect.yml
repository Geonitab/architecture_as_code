name: Architect Agent

on:
  workflow_dispatch:
    inputs:
      objective:
        description: "Vilket arkitekturellt m√•l ska agenten uppn√•?"
        required: true
      architecture_context:
        description: "K√§nda begr√§nsningar, beslut eller systemberoenden"
        required: false
        default: ""
      collaboration_notes:
        description: "Koordinationspunkter med andra roller (t.ex. Developer, Designer)"
        required: false
        default: ""
  workflow_call:
    inputs:
      objective:
        required: true
        type: string
      architecture_context:
        required: false
        type: string
        default: ""
      collaboration_notes:
        required: false
        type: string
        default: ""
    outputs:
      plan:
        description: "Arkitektens planerade n√§sta steg"
        value: ${{ jobs.plan.outputs.plan }}

jobs:
  plan:
    name: Sammanst√§ll arkitekturplan
    runs-on: ubuntu-latest
    outputs:
      plan: ${{ steps.compose.outputs.plan }}
    steps:
      - name: Komponera plan
        id: compose
        env:
          OBJECTIVE: ${{ inputs.objective }}
          ARCHITECTURE_CONTEXT: ${{ inputs.architecture_context }}
          COLLABORATION_NOTES: ${{ inputs.collaboration_notes }}
        run: |
          set -euo pipefail
          set -x  # Enable command tracing for debugging

          # Log input parameters for debugging
          echo "=== Input Parameters ==="
          echo "OBJECTIVE: ${OBJECTIVE}"
          echo "ARCHITECTURE_CONTEXT: ${ARCHITECTURE_CONTEXT}"
          echo "COLLABORATION_NOTES: ${COLLABORATION_NOTES}"
          echo "========================"

          objective="${OBJECTIVE:-Ingen specifik m√•ls√§ttning angiven.}"
          context_value="${ARCHITECTURE_CONTEXT:-}"
          if [ -z "$context_value" ]; then
            context_value="Ingen ytterligare kontext angiven."
          fi
          collaboration_value="${COLLABORATION_NOTES:-}"
          if [ -z "$collaboration_value" ]; then
            collaboration_value="Inga samarbetsnoteringar angivna."
          fi

          export AGENT_OBJECTIVE="$objective"
          export AGENT_CONTEXT="$context_value"
          export AGENT_COLLAB="$collaboration_value"

          # Log processed values
          echo "=== Processed Values ==="
          echo "AGENT_OBJECTIVE: ${AGENT_OBJECTIVE}"
          echo "AGENT_CONTEXT: ${AGENT_CONTEXT}"
          echo "AGENT_COLLAB: ${AGENT_COLLAB}"
          echo "========================"

          summary=$(
            cat <<PLAN
# Architect-agentens riktlinje

## M√•l
$AGENT_OBJECTIVE

## Arkitekturkontext
$AGENT_CONTEXT

## Samarbetsnoteringar
$AGENT_COLLAB

## Prim√§ra ansvar enligt 28_ai_agent_team.md
- Definiera systemets struktur, principer och riktlinjer.
- Uppdatera arkitekturartefakter som referensmodeller och komponentkartor.
- Granska f√∂rslag fr√•n Requirements Analyst och Developer f√∂r skalbarhet och robusthet.
- Samverka med Graphic Designer f√∂r att visualisera arkitekturdiagram.

## Rekommenderad arbetsg√•ng
1. Bekr√§fta arkitekturella m√•l och eventuella constraints.
2. Uppdatera eller skapa relevanta arkitekturdokument och diagram.
3. Synka med Developer om tekniska beslut och med Designer om UX-konsekvenser.
4. Identifiera risker kopplade till skalbarhet, s√§kerhet och teknisk skuld.
5. Dokumentera beslut i arkitekturloggen och kommunicera √§ndringar till Project Manager.

## Leverabler
- Arkitekturprinciper och riktlinjer.
- Uppdaterade diagram (Mermaid/PlantUML) och komponentbeskrivningar.
- Rekommendationer f√∂r tekniska beslut och prioriteringar.

## Kontrollpunkter
- S√§kerst√§ll att krav och arkitektur √§r sp√•rbara.
- St√§m av att f√∂reslagna l√∂sningar st√∂djer KPI:er och kvalitetsm√•l.
- F√∂rbered underlag till sprintdemo eller beslutspunkter.
PLAN
            )

          # Log the generated plan output
          echo "=== Generated Plan Output ==="
          printf '%s\n' "$summary"
          echo "============================="

          # Add debugging summary to GITHUB_STEP_SUMMARY
          cat >> "$GITHUB_STEP_SUMMARY" <<DEBUGSUMMARY
---

## üîç Debugging Information

### Input Parameters
- **Objective**: \`${AGENT_OBJECTIVE}\`
- **Architecture Context**: \`${AGENT_CONTEXT}\`
- **Collaboration Notes**: \`${AGENT_COLLAB}\`

### Workflow Execution
- **Workflow Run ID**: \`${{ github.run_id }}\`
- **Workflow Run Number**: \`${{ github.run_number }}\`
- **Triggered By**: \`${{ github.actor }}\`
- **Event Name**: \`${{ github.event_name }}\`

### Process Summary
‚úÖ Input parameters logged and validated
‚úÖ Plan composition completed
‚úÖ Output variables set successfully

---

DEBUGSUMMARY

          # Add the main plan to GITHUB_STEP_SUMMARY
          printf '%s\n' "$summary" >> "$GITHUB_STEP_SUMMARY"

          # Log output being saved
          echo "=== Saving to GITHUB_OUTPUT ==="

          # Set the output variable
          {
            echo "plan<<EOF"
            printf '%s\n' "$summary"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

          echo "Plan output saved successfully"
