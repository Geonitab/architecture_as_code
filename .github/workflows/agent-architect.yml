name: Architect Agent

on:
  workflow_dispatch:
    inputs:
      objective:
        description: "What architectural goal should the agent achieve?"
        required: true
      architecture_context:
        description: "Known constraints, decisions, or system dependencies"
        required: false
        default: ""
      collaboration_notes:
        description: "Coordination points with other roles (e.g., Developer, Designer)"
        required: false
        default: ""
  workflow_call:
    inputs:
      objective:
        required: true
        type: string
      architecture_context:
        required: false
        type: string
        default: ""
      collaboration_notes:
        required: false
        type: string
        default: ""
    outputs:
      plan:
        description: "The architect's planned next steps"
        value: ${{ jobs.plan.outputs.plan }}

jobs:
  plan:
    name: Compile Architecture Plan
    runs-on: ubuntu-latest
    outputs:
      plan: ${{ steps.compose.outputs.plan }}
    steps:
      - name: Compose Plan
        id: compose
        env:
          OBJECTIVE: ${{ inputs.objective }}
          ARCHITECTURE_CONTEXT: ${{ inputs.architecture_context }}
          COLLABORATION_NOTES: ${{ inputs.collaboration_notes }}
          DISPATCH_OBJECTIVE: ${{ github.event.inputs.objective }}
          DISPATCH_CONTEXT: ${{ github.event.inputs.architecture_context }}
          DISPATCH_COLLABORATION: ${{ github.event.inputs.collaboration_notes }}
        run: |
          set -euo pipefail
          objective_source="${OBJECTIVE:-${DISPATCH_OBJECTIVE:-}}"
          objective="${objective_source:-No specific objective provided.}"

          context_source="${ARCHITECTURE_CONTEXT:-${DISPATCH_CONTEXT:-}}"
          context_value="${context_source:-}"
          if [ -z "$context_value" ]; then
            context_value="No additional context provided."
          fi
          collaboration_source="${COLLABORATION_NOTES:-${DISPATCH_COLLABORATION:-}}"
          collaboration_value="${collaboration_source:-}"
          if [ -z "$collaboration_value" ]; then
            collaboration_value="No collaboration notes provided."
          fi

          export AGENT_OBJECTIVE="$objective"
          export AGENT_CONTEXT="$context_value"
          export AGENT_COLLAB="$collaboration_value"

          summary=$(
            cat <<PLAN
# Architect Agent's Guideline

## Objective
$AGENT_OBJECTIVE

## Architecture Context
$AGENT_CONTEXT

## Collaboration Notes
$AGENT_COLLAB

## Primary Responsibilities (from 28_ai_agent_team.md)
- Define the system's structure, principles, and guidelines.
- Update architecture artifacts such as reference models and component maps.
- Review proposals from the Requirements Analyst and Developer for scalability and robustness.
- Collaborate with the Graphic Designer to visualize architecture diagrams.

## Recommended Workflow
1. Confirm architectural objectives and any constraints.
2. Update or create relevant architecture documents and diagrams.
3. Sync with the Developer on technical decisions and the Designer on UX implications.
4. Identify risks related to scalability, security, and technical debt.
5. Document decisions in the architecture log and communicate changes to the Project Manager.

## Deliverables
- Architecture principles and guidelines.
- Updated diagrams (Mermaid/PlantUML) and component descriptions.
- Recommendations for technical decisions and priorities.

## Checkpoints
- Ensure that requirements and architecture are traceable.
- Verify that proposed solutions support KPIs and quality goals.
- Prepare materials for sprint demos or decision points.
PLAN
            )

          printf '%s\n' "$summary"

          if [ -n "${GITHUB_STEP_SUMMARY:-}" ]; then
            printf '%s\n' "$summary" >> "$GITHUB_STEP_SUMMARY"
          fi

          if [ -n "${GITHUB_OUTPUT:-}" ]; then
            {
              echo "plan<<EOF"
              printf '%s\n' "$summary"
              echo "EOF"
            } >> "$GITHUB_OUTPUT"
          fi