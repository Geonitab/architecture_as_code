name: Call OpenAI Assistant (Responses)
on:
  workflow_dispatch:
    inputs:
      prompt:
        description: "What should the assistant do?"
        required: true
        default: "Write a short status message about this commit."
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  ask-assistant:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Call OpenAI Responses API
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PROMPT: ${{ github.event_name == 'workflow_dispatch' && inputs.prompt || format('Summarise PR #{0}: {1}', github.event.pull_request.number, github.event.pull_request.title) }}
        run: |
          set -e
          sudo apt-get update && sudo apt-get install -y jq
          RESPONSE=$(curl -s https://api.openai.com/v1/responses \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d @- <<'JSON'
          {
            "model": "gpt-4o-mini",
            "input": [{"role":"user","content": "'"${PROMPT//\"/\\\"}"'"}]
          }
JSON
          )
          TEXT=$(echo "$RESPONSE" | jq -r '.output[0].content[0].text | select(.!=null)')
          echo "Assistant said:"
          echo "$TEXT"

      - name: Comment on PR (if PR)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require("node:child_process");
            const text = execSync('bash -lc "echo \\"$TEXT\\""',{stdio:["ignore","pipe","inherit"],env:{...process.env}}).toString();
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `ðŸ¤– OpenAI response:\n\n${text || "_(empty response)_"}`,
            });