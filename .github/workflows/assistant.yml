name: Call OpenAI Assistant (Responses)

on:
  workflow_dispatch:
    inputs:
      prompt:
        description: "What should the assistant do?"
        required: true
        default: "Write a short status message about this commit."
  pull_request:
    types: [opened, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  ask-assistant:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Set PROMPT in a dedicated step (use if: instead of ternary/&&||)
      - name: Set prompt (manual dispatch)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: echo "PROMPT=${{ github.event.inputs.prompt }}" >> $GITHUB_ENV

      - name: Set prompt (pull request)
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          echo "PROMPT=${{ format('Summarise PR #{0}: {1}', github.event.pull_request.number, github.event.pull_request.title) }}" >> $GITHUB_ENV

      - name: Call OpenAI Responses API
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -euo pipefail
          sudo apt-get update && sudo apt-get install -y jq

          # Build JSON with jq to avoid quoting/escaping issues
          REQUEST=$(jq -n --arg prompt "$PROMPT" '{
            model: "gpt-4o-mini",
            input: [{role:"user", content: $prompt}]
          }')

          RESPONSE=$(curl -sS https://api.openai.com/v1/responses \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$REQUEST")

          # Prefer the convenience field if present; fall back to nested structure
          TEXT=$(echo "$RESPONSE" | jq -r '.output_text // .output[0].content[0].text // empty')

          echo "Assistant said:"
          echo "$TEXT"

          # Expose TEXT for later steps
          {
            echo "ASSISTANT_TEXT<<EOF"
            echo "${TEXT:-}"
            echo "EOF"
          } >> "$GITHUB_ENV"

      - name: Comment on PR (if PR)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const body = `ðŸ¤– OpenAI response:\n\n${process.env.ASSISTANT_TEXT || "_(empty response)_"}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });