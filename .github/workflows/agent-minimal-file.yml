name: AI Agent - Read Issues & Create New If Needed

on:
  issue_comment:
    types: [created]
  issues:
    types: [opened]  # Ny trigger: N칛r en issue 칬ppnas

permissions:
  contents: write  # F칬r commit/push till loggfil
  issues: write   # Ny: F칬r att l칛sa/skriva issues (skapa nya)
  models: read    # F칬r AI-inference

jobs:
  process-issue-or-comment:
    # Trigga p친 /agent add: i kommentarer (som tidigare) ELLER p친 nya issues
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '/agent add:'))
      || github.event_name == 'issues'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # Hantera kommentar-input (som tidigare, f칬r bak친tkompatibilitet)
      - name: Extract input from comment (if applicable)
        id: extract-comment
        if: github.event_name == 'issue_comment'
        uses: actions/github-script@v7
        with:
          script: |
            const commentBody = context.payload.comment.body;
            const match = commentBody.match(/\/agent add:\s*(.+)/i);
            if (match) {
              core.setOutput('input-text', match[1].trim());
              core.setOutput('issue-number', context.issue.number.toString());
              core.setOutput('source-type', 'comment');
            } else {
              core.setOutput('input-text', '');
            }

      # Extrahera issue-body om det 칛r en ny issue
      - name: Extract issue body
        id: extract-issue
        if: github.event_name == 'issues'
        uses: actions/github-script@v7
        with:
          script: |
            const issueBody = context.payload.issue.body || '';
            core.setOutput('input-text', issueBody);
            core.setOutput('issue-number', context.issue.number.toString());
            core.setOutput('source-type', 'issue');

      # S칛tt en gemensam input-text (fr친n kommentar eller issue)
      - name: Set input text
        id: set-input
        run: |
          INPUT_TEXT="${{ steps.extract-comment.outputs.input-text || steps.extract-issue.outputs.input-text }}"
          echo "input-text=$INPUT_TEXT" >> $GITHUB_OUTPUT
          echo "source-issue=${{ steps.extract-comment.outputs.issue-number || steps.extract-issue.outputs.issue-number }}" >> $GITHUB_OUTPUT

      - name: Analyze with AI: Format & Decide on New Issue
        if: steps.set-input.outputs.input-text != ''
        id: ai-analyze
        uses: actions/ai-inference@v1
        with:
          model: xai/grok-3-mini  # Grok f칬r smart analys
          system-prompt: |
            Du 칛r en AI-agent som processar issues och kommentarer. 
            F칬r input-text: Formatera den med timestamp och sammanfattning. 
            Analysera om mer info beh칬vs (t.ex. otydligt, saknar data). 
            Returnera JSON: 
            {
              "formatted_text": "[YYYY-MM-DD HH:MM] Sammanfattning: [kort desc] - Original: [text]",
              "needs_new_issue": true/false,
              "new_issue_title": "Titel om true, annars ''",
              "new_issue_body": "Body med f칬rklaring och l칛nk till original-issue om true, annars ''"
            }
          prompt: |
            Input: ${{ steps.set-input.outputs.input-text }}
            Original source: Issue #${{ steps.set-input.outputs.source-issue }}

      - name: Parse AI response (JSON)
        if: steps.set-input.outputs.input-text != ''
        id: parse-ai
        run: |
          AI_RESPONSE='${{ steps.ai-analyze.outputs.response }}'
          echo "formatted_text=$(echo $AI_RESPONSE | jq -r '.formatted_text // empty')" >> $GITHUB_OUTPUT
          echo "needs_new_issue=$(echo $AI_RESPONSE | jq -r '.needs_new_issue // false')" >> $GITHUB_OUTPUT
          echo "new_title=$(echo $AI_RESPONSE | jq -r '.new_issue_title // empty')" >> $GITHUB_OUTPUT
          echo "new_body=$(echo $AI_RESPONSE | jq -r '.new_issue_body // empty')" >> $GITHUB_OUTPUT
        env:
          AI_RESPONSE: ${{ steps.ai-analyze.outputs.response }}

      # Append till loggfil (som tidigare, med formaterad text)
      - name: Read existing log and append
        if: steps.set-input.outputs.input-text != ''
        run: |
          LOG_FILE="agent_log.md"
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          FORMATTED="${{ steps.parse-ai.outputs.formatted_text }}"
          
          if [ -f "$LOG_FILE" ]; then
            cat "$LOG_FILE" > temp_log.md
          else
            echo "# Agent Log" > temp_log.md
          fi
          
          echo "## Entry fr친n ${{ steps.set-input.outputs.source-issue }} ($TIMESTAMP)" >> temp_log.md
          echo "$FORMATTED" >> temp_log.md
          echo "" >> temp_log.md
          echo "---" >> temp_log.md
          
          mv temp_log.md "$LOG_FILE"

      # Skapa ny issue om AI beslutar det
      - name: Create follow-up issue if needed
        if: steps.parse-ai.outputs.needs_new_issue == 'true' && steps.parse-ai.outputs.new_title != ''
        uses: actions/github-script@v7
        with:
          script: |
            const newTitle = '${{ steps.parse-ai.outputs.new_title }}';
            const newBody = '${{ steps.parse-ai.outputs.new_body }}' + '\n\nRelaterat till: #${{ steps.set-input.outputs.source-issue }}';
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: newTitle,
              body: newBody
            });
            
            core.info(`Skapade ny issue: ${newTitle}`);

      - name: Commit log changes
        if: steps.set-input.outputs.input-text != ''
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub AI Agent"
          git add agent_log.md
          ACTION_TAKEN="${{ steps.parse-ai.outputs.needs_new_issue == 'true' && 'Skapade ny issue' || 'Endast loggad' }}"
          COMMIT_MSG="AI Agent: Processade ${{ steps.set-input.outputs.source-type }} #${{ steps.set-input.outputs.source-issue }} - $ACTION_TAKEN"
          git commit -m "$COMMIT_MSG" || exit 0  # Skip om inga 칛ndringar
          git push

      # Bekr칛ftelse-kommentar i original-issue
      - name: Comment on original issue
        if: steps.set-input.outputs.input-text != ''
        uses: actions/github-script@v7
        with:
          script: |
            const actionMsg = '${{ steps.parse-ai.outputs.needs_new_issue == 'true' ? 'Analyserad och ny issue skapad!' : 'Analyserad och loggad.' }}';
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.set-input.outputs.source-issue }},
              body: `游뱄 AI-agenten har processat din input! $actionMsg Se loggen i agent_log.md.`
            });
