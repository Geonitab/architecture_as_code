name: Issue Responder AI Agent

on:
  issues:
    types: [opened, reopened]

permissions:
  issues: write

jobs:
  respond_to_latest_issue:
    name: Respond to latest issue
    runs-on: ubuntu-latest
    steps:
      - name: Assign best-fit bot to latest issue
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            const { data: issues } = await github.rest.issues.listForRepo({
              owner,
              repo,
              state: 'all',
              sort: 'created',
              direction: 'desc',
              per_page: 1,
            });

            if (!issues.length) {
              core.info('No issues found to respond to.');
              return;
            }

            const latestIssue = issues[0];

            const content = `${latestIssue.title} ${latestIssue.body || ''}`.toLowerCase();

            const botAssignments = [
              { name: 'Designer', keywords: ['ui', 'ux', 'visual', 'styling', 'layout', 'mockup', 'branding'] },
              { name: 'Architect', keywords: ['architecture', 'architectural', 'blueprint', 'system layout', 'system map', 'infrastructure'] },
              { name: 'Quality Assurance', keywords: ['bug', 'issue', 'error', 'test', 'testing', 'qa', 'quality', 'failure'] },
              { name: 'Developer', keywords: ['develop', 'development', 'implement', 'implementation', 'code', 'coding', 'feature', 'fix'] },
              { name: 'Documentarian', keywords: ['documentation', 'document', 'docs', 'guide', 'manual', 'readme'] },
              { name: 'Requirements Analyst', keywords: ['requirement', 'requirements', 'analysis', 'specification', 'user story', 'acceptance criteria'] },
              { name: 'Editor', keywords: ['edit', 'editing', 'copy', 'proofread', 'language', 'grammar', 'tone'] },
            ];

            const assignedBot = botAssignments.find(({ keywords }) =>
              keywords.some((keyword) => content.includes(keyword))
            )?.name || 'Requirements Analyst';

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: latestIssue.number,
              body: `Hello! After reviewing this issue, the ${assignedBot} bot will take the lead. They will follow up with the next steps shortly.`,
            });

            core.info(`Assigned ${assignedBot} bot to issue #${latestIssue.number}.`);
