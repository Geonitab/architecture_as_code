name: Call OpenAI Assistant (Issues â†’ PR)

on:
  issues:
    types: [opened, edited, reopened]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  propose-changes:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Gather context
        id: ctx
        run: |
          printf '%s' "${{ github.event.issue.title }}" > .gh-issue-title
          printf '%s' "${{ github.event.issue.body }}"  > .gh-issue-body

      - name: Call OpenAI to propose a patch
        id: openai
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_BASE_URL: ${{ vars.OPENAI_BASE_URL || 'https://api.openai.com' }}
          MODEL: gpt-4o-mini
          PROMPT: |
            You are a careful software maintainer.
            The repository has just received a GitHub Issue with a request.
            Task: propose a minimal patch as a unified diff that applies cleanly to the current HEAD.
            Constraints:
            - Only output a unified diff starting with 'diff --git'.
            - Do not include explanations or code fences.
            - Keep changes small and safe.
            Context (issue title):
            "${{ steps.ctx.outputs.none || '' }}"
            Context (issue body):
            <<ISSUE_BODY>>
        run: |
          set -euo pipefail
          issue_body="$(cat .gh-issue-body)"
          prompt="${PROMPT/<<ISSUE_BODY>>/${issue_body//$'\n'/\\n}}"

          # Make request with basic retry/backoff for transient 429/5xx
          attempt=0
          max_attempts=3
          sleep_secs=2
          while :; do
            attempt=$((attempt+1))
            http_code=$(curl -sS -o reply.json -w '%{http_code}' \
              -X POST "${OPENAI_BASE_URL}/v1/chat/completions" \
              -H "Authorization: Bearer ${OPENAI_API_KEY}" \
              -H "Content-Type: application/json" \
              -d "$(jq -n --arg m "$MODEL" --arg p "$prompt" \
                    '{model:$m, temperature:0.2, messages:[{role:"user", content:$p}], max_tokens: 2000}')")
            if [ "$http_code" -ge 200 ] && [ "$http_code" -lt 300 ]; then
              break
            fi
            echo "OpenAI HTTP $http_code (attempt $attempt)" >&2
            if [ "$http_code" = "401" ]; then
              echo "Probably a missing/invalid OPENAI_API_KEY." >&2
              exit 1
            fi
            if [ "$attempt" -ge "$max_attempts" ]; then
              cat reply.json >&2 || true
              exit 1
            fi
            sleep "$sleep_secs"
            sleep_secs=$((sleep_secs*2))
          done

          jq -r '.choices[0].message.content' reply.json > patch.diff
          # sanity: ensure we really got a diff and not prose
          if ! head -n1 patch.diff | grep -q '^diff --git '; then
            echo "Model did not return a unified diff. Content follows:" >&2
            sed -n '1,120p' patch.diff >&2
            exit 1
          fi

      - name: Validate and apply patch
        if: ${{ success() }}
        run: |
          set -euo pipefail
          git apply --check patch.diff
          git apply patch.diff
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git config user.name "actions-bot"
          git config user.email "actions@users.noreply.github.com"
          git commit -m "Proposed fix from issue #${{ github.event.issue.number }}"

      - name: Create pull request (if patch applied)
        if: ${{ success() && !cancelled() }}
        uses: peter-evans/create-pull-request@v6
        with:
          title: "Proposed fix for issue #${{ github.event.issue.number }}"
          body: "Automated patch proposed by OpenAI based on the issue."
          branch: "auto/issue-${{ github.event.issue.number }}"
          base: ${{ github.event.repository.default_branch }}