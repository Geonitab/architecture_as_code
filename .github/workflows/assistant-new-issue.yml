name: Call OpenAI Assistant (Issues ‚Üí PR)

on:
  issues:
    types: [opened]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  propose-changes:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Gather context
        id: ctx
        run: |
          set -euo pipefail
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          ISSUE_TITLE="${{ github.event.issue.title }}"
          ISSUE_BODY="${{ github.event.issue.body || '' }}"

          # Keep inputs compact for the model
          TRIMMED_BODY="$(printf "%s" "$ISSUE_BODY" | head -c 4000)"

          # Repo map (limited) and a pre-indented variant (10 spaces) for ‚Äúcode blocks‚Äù
          REPO_MAP="$( (git ls-files | head -n 400) | sed 's/^/ - /' )"
          REPO_MAP_10="$(printf "%s\n" "$REPO_MAP" | sed 's/^/          /')"

          {
            echo "ISSUE_NUMBER=$ISSUE_NUMBER"
            echo "ISSUE_TITLE<<'EOF'"
            echo "$ISSUE_TITLE"
            echo "EOF"
            echo "ISSUE_BODY<<'EOF'"
            echo "$TRIMMED_BODY"
            echo "EOF"
            echo "REPO_MAP_10<<'EOF'"
            echo "$REPO_MAP_10"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Call OpenAI to propose a patch
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Build the full prompt as a YAML multiline string (no heredocs).
          PROMPT: |
            You are an expert software engineer creating a SMALL, SAFE patch for this repository.

            Task:
            - Propose minimal code changes that address the issue.
            - Generate a UNIX unified diff that applies cleanly with `git apply --index`.
            - Keep changes focused (prefer ‚â§ ~200 lines touched total).
            - Do not run commands; only produce a patch.
            - If the issue is purely documentation or config, patch those files accordingly.

            Repository map (truncated):
            ${{ steps.ctx.outputs.REPO_MAP_10 }}

            Issue:
            - Number: #${{ steps.ctx.outputs.ISSUE_NUMBER }}
            - Title:
            ${{ steps.ctx.outputs.ISSUE_TITLE }}
            - Body:
            ${{ steps.ctx.outputs.ISSUE_BODY }}

            Output STRICTLY as minified JSON with keys: pr_title, pr_body, patch
            Example:
                      {"pr_title":"Fix: X","pr_body":"Why + what changed","patch":"diff --git a/file b/file\n--- a/file\n+++ b/file\n@@ ..."}
        run: |
          set -euo pipefail
          sudo apt-get update >/dev/null && sudo apt-get install -y jq >/dev/null

          REQUEST=$(jq -n --arg prompt "$PROMPT" '{
            model: "gpt-4o-mini",
            input: [{role:"user", content: $prompt}]
          }')

          RAW=$(curl -sS https://api.openai.com/v1/responses \
            -H "Authorization: Bearer '"$OPENAI_API_KEY"'" \
            -H "Content-Type: application/json" \
            -d "$REQUEST")

          TEXT=$(echo "$RAW" | jq -r '.output_text // .output[0].content[0].text // empty')
          [ -z "$TEXT" ] && { echo "No text in OpenAI response."; exit 1; }

          # Extract JSON even if any stray prose was returned
          JSON=$(printf "%s" "$TEXT" | awk 'BEGIN{p=0}{if(index($0,"{"))p=1;if(p)print}')
          echo "$JSON" | jq . >/dev/null

          PR_TITLE=$(echo "$JSON" | jq -r '.pr_title // "Proposed changes from OpenAI"')
          PR_BODY=$(echo "$JSON" | jq -r '.pr_body // ""')
          PATCH=$(echo "$JSON" | jq -r '.patch // ""')

          if [ -z "$PATCH" ] || ! printf "%s" "$PATCH" | grep -q '^diff --git '; then
            echo "Model did not return a valid unified diff."; echo "$TEXT"; exit 1
          fi

          printf "%s" "$PATCH" > patch.diff

          {
            echo "PR_TITLE<<EOF"
            echo "$PR_TITLE"
            echo "EOF"
            echo "PR_BODY<<EOF"
            echo "$PR_BODY"
            echo "EOF"
          } >> "$GITHUB_ENV"

      - name: Validate and apply patch
        id: apply
        continue-on-error: true
        run: |
          set -euo pipefail
          if ! git apply --index --check patch.diff; then
            echo "ok=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          BRANCH="issue-${{ steps.ctx.outputs.ISSUE_NUMBER }}-ai"
          git switch -c "$BRANCH"
          git apply --index patch.diff
          git commit -m "${PR_TITLE}"
          git push --set-upstream origin "$BRANCH"

          echo "ok=true" >> "$GITHUB_OUTPUT"
          echo "branch=$BRANCH" >> "$GITHUB_OUTPUT"

      - name: Create pull request (if patch applied)
        if: steps.apply.outputs.ok == 'true'
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: process.env.PR_TITLE,
              head: `${context.repo.owner}:${'${{ steps.apply.outputs.branch }}'}`,
              base: context.payload.repository.default_branch,
              body: process.env.PR_BODY
            });
            core.setOutput('number', pr.data.number);
            core.setOutput('url', pr.data.html_url);

      - name: Comment on issue (success)
        if: steps.apply.outputs.ok == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const body = [
              "ü§ñ I‚Äôve proposed code changes and opened a PR:",
              `‚Ä¢ **PR #${{ steps.pr.outputs.number }}** ‚Äì ${{ steps.pr.outputs.url }}`,
              "",
              "_This PR was generated automatically from your issue using OpenAI._"
            ].join("\n");
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });

      - name: Comment on issue (failure)
        if: steps.apply.outputs.ok != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const body = [
              "ü§ñ I attempted to generate code changes but the patch could not be applied cleanly.",
              "",
              "Potential reasons: outdated repo context, ambiguous file targets, or conflicts.",
              "You can add explicit file paths or a smaller scope and open a new issue."
            ].join("\n");
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });