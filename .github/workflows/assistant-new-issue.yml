name: Assistant: New Issue

on:
  issues:
    types: [opened, edited, reopened]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  propose-changes:
    name: Propose patch for issue
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Gather context
        id: ctx
        run: |
          echo "Gathering repository context..."
          echo "Issue title: ${{ github.event.issue.title }}"
          echo "Issue body length: $(echo "${{ github.event.issue.body }}" | wc -c)"

      - name: Validate secrets
        id: validate
        run: |
          if [ -z "${{ secrets.OPENAI_API_KEY }}" ]; then
            echo "Error: Missing required secret OPENAI_API_KEY."
            echo "Please add it under Settings → Secrets and variables → Actions."
            exit 1
          fi
          echo "Secrets validation passed."

      - name: Call OpenAI to propose a patch
        id: openai
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_BASE_URL: ${{ vars.OPENAI_BASE_URL || 'https://api.openai.com' }}
          MODEL: ${{ vars.OPENAI_MODEL || 'gpt-4o-mini' }}
          PROMPT: |
            You are a careful software maintainer.
            The repository has just received a GitHub Issue requesting a change.
            Your task: propose a minimal patch as a unified diff that applies cleanly to the current HEAD.
            Respond only with the diff — no explanations or commentary.
            Keep the patch safe, small, and directly related to the issue.

            Context (issue title):
            "${{ github.event.issue.title }}"

            Context (issue body):
            ${{ github.event.issue.body }}
        run: |
          echo "Preparing API request..."
          body=$(jq -n --arg model "$MODEL" --arg prompt "$PROMPT" '{
            model: $model,
            messages: [{ "role": "user", "content": $prompt }]
          }')

          echo "Sending request to OpenAI..."
          response=$(curl -s -X POST "$OPENAI_BASE_URL/v1/chat/completions" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d "$body")

          if echo "$response" | jq -e '.error' >/dev/null; then
            echo "OpenAI API returned an error:"
            echo "$response" | jq '.error'
            exit 1
          fi

          echo "Response received."
          echo "$response" | jq '.choices[0].message.content' -r > patch.diff

          echo "Generated patch (first 200 lines shown if long):"
          head -n 200 patch.diff || true

      - name: Apply proposed patch
        if: success()
        run: |
          if [ -s patch.diff ]; then
            echo "Validating patch applies cleanly..."
            git apply --check patch.diff || {
              echo "Patch does not apply cleanly."
              exit 1
            }
            git apply patch.diff
            echo "Patch applied successfully."
          else
            echo "No patch generated; skipping apply."
          fi

      - name: Commit and push changes
        if: success()
        run: |
          if [ -s patch.diff ]; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            branch="issue-${{ github.event.issue.number }}"
            git checkout -b "$branch"
            git add .
            git commit -m "Proposed fix for issue #${{ github.event.issue.number }}"
            git push origin "$branch"
            echo "branch=$branch" >> "$GITHUB_OUTPUT"
          else
            echo "No changes to commit."
          fi
        id: push

      - name: Create pull request
        if: success() && steps.push.outputs.branch
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.push.outputs.branch }}
          title: "Proposed fix for issue #${{ github.event.issue.number }} – ${{ github.event.issue.title }}"
          body: |
            This PR was automatically generated by the assistant workflow
            in response to issue #${{ github.event.issue.number }}.
            Please review the proposed patch below.
          labels: |
            automated
            assistant

      - name: Comment on issue with PR link
        if: success() && steps.cpr.outputs.pull-request-url
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prUrl = "${{ steps.cpr.outputs.pull-request-url }}";
            const issueNumber = ${{ github.event.issue.number }};
            const body = [
              "Hello! I have created a pull request with a proposed fix:",
              prUrl,
              "",
              "Please review it when you have a moment."
            ].join("\n");
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body
            })