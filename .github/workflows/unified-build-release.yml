name: Unified Build & Release

# This unified workflow consolidates book building and release functionality
# using a Docker-based build strategy with comprehensive deliverable generation
# (books, presentations, whitepapers, websites).
#
# SYNTAX HIGHLIGHTING:
# - HTML deliverables (whitepapers, presentations) use Prism.js via CDN for syntax highlighting
# - PDF/EPUB/DOCX deliverables use Pandoc's built-in Skylighting engine for syntax highlighting
# - Prism.js CSS and JavaScript are loaded from CDN in HTML templates (no installation needed)
# - Pandoc syntax highlighting is configured via docs/pandoc.yaml (highlight-style: tango)

'on':
  push:
    branches: [main]
    paths:
      # Book content and diagrams
      - 'docs/**/*.md'
      - 'docs/images/**/*.mmd'
      # Generation and build scripts
      - 'generate_book.py'
      - 'generate_whitepapers.py'
      - 'generate_presentation.py'
      - 'build_release.sh'
      - 'docs/build_book.sh'
      # Templates (includes Prism.js syntax highlighting configuration)
      - 'templates/**/*.html'
      - 'templates/**/*.latex'
      # Pandoc configuration (includes syntax highlighting settings)
      - 'docs/pandoc.yaml'
      # Docker and workflow files
      - 'Dockerfile.book-builder'
      - '.github/workflows/unified-build-release.yml'
  pull_request:
    branches: [main]
    paths:
      - 'docs/**/*.md'
      - 'docs/images/**/*.mmd'
      - 'generate_book.py'
      - 'generate_whitepapers.py'
      - 'generate_presentation.py'
      - 'build_release.sh'
      - 'docs/build_book.sh'
      - 'templates/**/*.html'
      - 'templates/**/*.latex'
      - 'docs/pandoc.yaml'
      - 'Dockerfile.book-builder'
      - '.github/workflows/unified-build-release.yml'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create GitHub Release'
        required: false
        default: 'true'
        type: boolean
      deliverables:
        description: 'Deliverables to Build'
        required: false
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'book-only'
          - 'presentations-only'
          - 'whitepapers-only'
          - 'website-only'

env:
  PANDOC_VERSION: "3.1.9"
  ARTIFACT_RETENTION_DAYS: 30

jobs:
  # Determine deliverables to build
  setup:
    name: 🔧 Setup Build Configuration
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      build_deliverables: ${{ steps.strategy.outputs.build_deliverables }}
    steps:
      - name: 📋 Determine deliverables
        id: strategy
        run: |
          echo "=== Determining Build Configuration ==="

          DELIVERABLES="${{ github.event.inputs.deliverables || 'all' }}"

          echo "build_deliverables=$DELIVERABLES" >> $GITHUB_OUTPUT
          echo "📦 Deliverables to build: $DELIVERABLES"

  # Docker-optimized build (equivalent to build-book-fast.yml)
  docker-build:
    name: 🐳 Docker Build & Release
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: setup

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐍 Set up Python (for content generation)
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: 🔧 Set up Node.js (for website build)
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Build Docker image with cache
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.book-builder
          tags: unified-builder:latest
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: 📦 Install Node.js dependencies
        run: |
          echo "=== Installing Node.js dependencies ==="
          npm ci --legacy-peer-deps
          echo "✅ Node.js dependencies installed"

      - name: 📝 Generate book content
        run: |
          echo "=== Generating book content ==="
          python3 generate_book.py
          echo "✅ Book content generated"

      - name: 🌐 Build website
        run: |
          echo "=== Building website ==="
          npm run build
          echo "✅ Website built successfully"

      - name: 🏗️ Build all formats in Docker container
        run: |
          echo "=== Building all deliverables in Docker container ==="

          # Create release directory structure
          echo "📁 Creating release directory structure..."
          mkdir -p releases/{book,presentation,whitepapers,website}
          echo "✅ Release directories created:"
          ls -la releases/

          # Check what deliverables to build
          DELIVERABLES="${{ needs.setup.outputs.build_deliverables }}"
          echo "🎯 Building deliverables: $DELIVERABLES"

          # Build using Docker with proper Chrome configuration
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            -e PUPPETEER_EXECUTABLE_PATH=/usr/bin/google-chrome-stable \
            -e CHROME_FLAGS="--no-sandbox --disable-setuid-sandbox --disable-dev-shm-usage" \
            unified-builder:latest \
            bash -c "
              echo '=== Running Docker-based unified build ===' &&
              cd /workspace &&

              case '$DELIVERABLES' in
                'book-only')
                  echo '📖 Building book formats only...' &&
                  echo '📝 Step 1: Generating book content...' &&
                  python3 generate_book.py &&
                  echo '📝 Step 2: Building book formats...' &&
                  cd docs &&
                  ./build_book.sh --release &&
                  cd .. &&
                  echo '📝 Step 3: Verifying book files...' &&
                  ls -la releases/book/ || echo '⚠️ No book files found'
                  ;;
                'presentations-only')
                  echo '🎤 Building presentations only...' &&
                  python3 generate_presentation.py --release &&
                  echo '📝 Verifying presentation files...' &&
                  ls -la releases/presentation/ || echo '⚠️ No presentation files found'
                  ;;
                'whitepapers-only')
                  echo '📄 Building whitepapers only...' &&
                  python3 generate_whitepapers.py --release &&
                  echo '📝 Verifying whitepaper files...' &&
                  ls -la releases/whitepapers/ || echo '⚠️ No whitepaper files found'
                  ;;
                'website-only')
                  echo '🌐 Website already built, nothing to do in Docker...'
                  ;;
                'all'|*)
                  echo '📦 Building all deliverables...' &&
                  # Build book in all formats
                  echo '📖 Step 1: Building book formats...' &&
                  echo '📝 Generating book content...' &&
                  python3 generate_book.py &&
                  cd docs &&
                  ./build_book.sh --release &&
                  cd .. &&
                  echo '📝 Verifying book files...' &&
                  ls -la releases/book/ || echo '⚠️ No book files found' &&

                  # Generate whitepapers
                  echo '📄 Step 2: Generating whitepapers...' &&
                  python3 generate_whitepapers.py --release &&
                  echo '📝 Verifying whitepaper files...' &&
                  ls -la releases/whitepapers/ || echo '⚠️ No whitepaper files found' &&

                  # Generate presentations
                  echo '🎤 Step 3: Generating presentations...' &&
                  python3 generate_presentation.py --release &&
                  echo '📝 Verifying presentation files...' &&
                  ls -la releases/presentation/ || echo '⚠️ No presentation files found'
                  ;;
              esac &&

              echo '✅ Docker-based build completed' &&
              echo '📁 Final directory structure:' &&
              find releases/ -type d | sort &&
              echo '📄 Final file count:' &&
              find releases/ -type f | wc -l
            "

      - name: 🌐 Copy website to release
        run: |
          echo "=== Copying website to release folder ==="
          if [ -d "dist" ]; then
            # Clean releases/website directory safely
            if [ -d "releases/website" ]; then
              # Change ownership if files exist (Docker may create them as different user)
              if [ "$(ls -A releases/website/)" ]; then
                sudo chown -R $(id -u):$(id -g) releases/website/ || true
              fi
              rm -rf releases/website/*
            fi
            cp -r dist/* releases/website/
            echo "✅ Website copied to releases/website/"
            echo "📝 Website files copied:"
            find releases/website -type f | head -10
            echo "📊 Total website files: $(find releases/website -type f | wc -l)"
          else
            echo "❌ Website build directory 'dist' not found"
            exit 1
          fi

      - name: 🔍 Verify files were created (Docker)
        run: |
          echo "=== Verifying Docker build output files ==="
          
          # Fix ownership issues that might occur with Docker
          sudo chown -R $(id -u):$(id -g) releases/ || true
          
          echo "📁 Release directory structure:"
          find releases/ -type d | sort
          
          echo ""
          echo "📄 All files in releases directory:"
          find releases/ -type f | sort
          
          echo ""
          echo "📊 File count by directory:"
          for dir in releases/*/; do
            if [ -d "$dir" ]; then
              count=$(find "$dir" -type f | wc -l)
              echo "  $(basename "$dir"): $count files"
            fi
          done
          
          echo ""
          echo "🔍 Checking for expected key files:"
          
          # Check for book files
          if [ -f "releases/book/arkitektur_som_kod.pdf" ]; then
            echo "✅ Book PDF found ($(ls -lh releases/book/arkitektur_som_kod.pdf | awk '{print $5}'))"
          else
            echo "❌ Book PDF not found"
          fi
          
          # Check for presentation files
          presentation_files=$(find releases/presentation -name "*.md" -o -name "*.py" -o -name "*.txt" -o -name "*.pptx" 2>/dev/null | wc -l)
          if [ "$presentation_files" -gt 0 ]; then
            echo "✅ Presentation materials found ($presentation_files files)"
          else
            echo "❌ No presentation materials found"
          fi
          
          # Check for whitepaper files
          whitepaper_files=$(find releases/whitepapers -name "*.html" -o -name "*.pdf" 2>/dev/null | wc -l)
          if [ "$whitepaper_files" -gt 0 ]; then
            echo "✅ Whitepaper files found ($whitepaper_files files)"
          else
            echo "❌ No whitepaper files found"
          fi
          
          # Check for website files
          website_files=$(find releases/website -type f 2>/dev/null | wc -l)
          if [ "$website_files" -gt 0 ]; then
            echo "✅ Website files found ($website_files files)"
          else
            echo "❌ No website files found"
          fi

      - name: 📊 Docker build summary
        run: |
          echo "=== Docker-based Build Summary ==="

          echo "📚 Book formats:"
          if [ -d "releases/book" ]; then
            ls -la releases/book/ || echo "   No book files found"
            if [ -f "releases/book/arkitektur_som_kod.pdf" ]; then
              echo "   📖 PDF size: $(ls -lh releases/book/arkitektur_som_kod.pdf | awk '{print $5}')"
            fi
          fi

          echo ""
          echo "🎤 Presentation materials:"
          if [ -d "releases/presentation" ]; then
            ls -la releases/presentation/ || echo "   No presentation files found"
          fi

          echo ""
          echo "📄 Whitepapers:"
          if [ -d "releases/whitepapers" ]; then
            whitepaper_count=$(ls releases/whitepapers/*.html 2>/dev/null | wc -l || echo "0")
            echo "   $whitepaper_count HTML whitepaper files"
            if [ -f "releases/whitepapers/whitepapers_combined.pdf" ]; then
              echo "   ✅ Combined PDF generated"
            fi
          fi

          echo ""
          echo "🌐 Website:"
          if [ -d "releases/website" ] && [ "$(ls -A releases/website)" ]; then
            website_files=$(find releases/website -type f | wc -l)
            echo "   $website_files files copied to releases/website/"
          else
            echo "   No website files found"
          fi

          echo ""
          echo "📁 Total release size: $(du -sh releases/ | awk '{print $1}')"
          echo "🐳 Docker-based build completed at: $(date)"

      - name: 📤 Upload docker build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: unified-docker-build
          path: releases/
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  # Combine results and create unified release
  finalize:
    name: 📦 Finalize & Release
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [setup, docker-build]
    if: always() && needs.docker-build.result == 'success'

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: 🔄 Merge build results
        run: |
          echo "=== Using Docker build results ==="
          mkdir -p final-release/{book,presentation,whitepapers,website}

          echo "📋 Available artifacts:"
          ls -la artifacts/ || echo "No artifacts directory found"
          
          if [ -d "artifacts" ]; then
            find artifacts/ -type d | sort
            echo ""
            echo "📄 Artifact contents:"
            find artifacts/ -type f | sort
          fi

          # Use docker build results
          if [ -d "artifacts/unified-docker-build" ]; then
            echo "🐳 Using docker build results"
            echo "📄 Docker build contents:"
            find artifacts/unified-docker-build/ -type f | sort
            cp -r artifacts/unified-docker-build/* final-release/
            BUILD_SOURCE="docker"
          else
            echo "❌ No successful build artifacts found"
            echo "Available directories in artifacts/:"
            ls -la artifacts/ 2>/dev/null || echo "No artifacts directory exists"
            exit 1
          fi

          echo "✅ Build results merged from $BUILD_SOURCE build"
          echo ""
          echo "📁 Final release structure:"
          find final-release -type d | sort
          echo ""
          echo "📄 Final release files:"
          find final-release -type f | sort
          echo ""
          echo "📊 Final file counts:"
          for dir in final-release/*/; do
            if [ -d "$dir" ]; then
              count=$(find "$dir" -type f | wc -l)
              echo "  $(basename "$dir"): $count files"
            fi
          done

      - name: 📤 Upload individual components
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: book-formats-unified
          path: final-release/book/
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          if-no-files-found: warn

      - name: 📤 Upload presentation materials
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: presentation-materials-unified
          path: final-release/presentation/
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          if-no-files-found: warn

      - name: 📤 Upload whitepapers
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: whitepapers-unified
          path: final-release/whitepapers/
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          if-no-files-found: warn

      - name: 📤 Upload website build
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: website-build-unified
          path: final-release/website/
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          if-no-files-found: warn

      - name: 📦 Create complete release archive
        if: success()
        run: |
          echo "=== Creating complete release archive ==="
          cd final-release
          zip -r ../unified-release-archive.zip .
          cd ..
          echo "✅ Complete release archive created"
          ls -lh unified-release-archive.zip

      - name: 📤 Upload complete release archive
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: unified-release-archive
          path: unified-release-archive.zip
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

      - name: 🚀 Create comprehensive GitHub Release
        if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}-unified
          name: "Arkitektur som kod v${{ github.run_number }} - Unified Release"
          body: |
            📚 **Arkitektur som kod - Unified Complete Release**

            Genererad från commit: ${{ github.sha }}

            **🐳 Docker-Based Build Process**

            This release was generated using the streamlined Docker-only workflow that provides:
            - ✅ Optimized Docker builds with layer caching
            - ✅ Complete book formats (PDF, EPUB, DOCX)
            - ✅ Presentation materials (PPTX)
            - ✅ Individual and combined whitepapers
            - ✅ Production-ready website build

            ### 📦 Complete Release Package Contents:

            #### 📖 Book Formats
            - `arkitektur_som_kod.pdf` - Complete PDF book
            - `arkitektur_som_kod.epub` - EPUB format for e-readers
            - `arkitektur_som_kod.docx` - Microsoft Word format

            #### 🎤 Presentation Materials
            - `arkitektur_som_kod_presentation.pptx` - PowerPoint presentation
            - Presentation outline and generation scripts

            #### 📄 Whitepapers
            - Individual HTML whitepapers for each chapter
            - `whitepapers_combined.pdf` - All whitepapers in single PDF

            #### 🌐 Website
            - Complete static website build ready for deployment

            **🛠️ Build Information:**
            - Built with Docker-optimized unified workflow
            - Pandoc ${{ env.PANDOC_VERSION }} with XeLaTeX PDF-engine
            - Docker layer caching for faster builds
            - Mermaid diagrams converted to PNG
            - React application built for production
            - Python-generated presentations and whitepapers

            **📥 Download Options:**
            - Individual components from Assets below
            - `unified-release-archive.zip` - All deliverables in one archive

            🎯 **This unified release includes ALL project deliverables with optimized build performance!**
          files: |
            final-release/book/arkitektur_som_kod.pdf
            final-release/book/arkitektur_som_kod.epub
            final-release/book/arkitektur_som_kod.docx
            final-release/presentation/arkitektur_som_kod_presentation.pptx
            final-release/whitepapers/whitepapers_combined.pdf
            unified-release-archive.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
