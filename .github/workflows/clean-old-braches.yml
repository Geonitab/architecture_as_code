name: Cleanup Old Branches

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC
  workflow_dispatch:
    inputs:
      confirm:
        description: "Type 'All' to delete ALL branches except 'main' and 'gh-pages'. Leave empty to delete only branches older than 2 days."
        required: false
        default: ""

jobs:
  cleanup:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required to delete branches

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          ref: main
          fetch-depth: 0

      - name: Fetch all branches
        run: git fetch origin +refs/heads/*:refs/remotes/origin/*

      - name: Delete branches (forced All mode if requested)
        env:
          CONFIRM: ${{ github.event.inputs.confirm }}
        run: |
          #!/bin/bash
          set -euo pipefail

          # --- Config ---
          PROTECTED=("main" "gh-pages")

          # Determine mode: "all" if workflow_dispatch input equals "All" (case-insensitive), else "age"
          shopt -s nocasematch
          if [[ "${CONFIRM:-}" == "All" ]]; then
            MODE="all"
          else
            MODE="age"
          fi
          shopt -u nocasematch

          echo "Mode: ${MODE}"

          # Current time and 2-day threshold (used only in age mode)
          current_time=$(date +%s)
          two_days_ago=$((current_time - 2 * 24 * 3600))

          # Get list of remote branches (exclude HEAD alias and protected branches)
          mapfile -t branches < <(git branch -r \
            | grep 'origin/' \
            | grep -v '->' \
            | sed 's|origin/||' \
            | sed 's/^[[:space:]]*//' \
          )

          # Helper: check if a value is in PROTECTED array
          is_protected () {
            local b="$1"
            for p in "${PROTECTED[@]}"; do
              if [[ "$b" == "$p" ]]; then
                return 0
              fi
            done
            return 1
          }

          for branch in "${branches[@]}"; do
            # Skip protected branches
            if is_protected "$branch"; then
              echo "Skipping protected branch: $branch"
              continue
            fi

            # Skip if branch not found remotely (defensive)
            if ! git rev-parse --verify "origin/$branch" >/dev/null 2>&1; then
              echo "Skipping $branch: not found on origin"
              continue
            fi

            if [[ "$MODE" == "all" ]]; then
              echo "Deleting branch $branch (forced 'All' mode)"
              # Don't fail the whole job if deletion is blocked (e.g., protected)
              git push origin --delete "$branch" || echo "Failed to delete $branch (may be protected or already gone)"
              continue
            fi

            # Age mode: delete only if last commit is older than 2 days
            commit_time=$(git log -1 --format=%ct "origin/$branch" 2>/dev/null || echo "0")
            if [[ "$commit_time" -lt "$two_days_ago" ]]; then
              echo "Deleting branch $branch (last commit: $(date -d "@$commit_time"))"
              git push origin --delete "$branch" || echo "Failed to delete $branch (may be protected or already gone)"
            else
              echo "Keeping branch $branch (last commit: $(date -d "@$commit_time"))"
            fi
          done